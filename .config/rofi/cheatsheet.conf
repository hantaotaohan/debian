###################################### VIM SHORTCUTS ########################################
-------------------------------------- VIM MOVEMENT -----------------------------------------
vim move: h                                 # 光标左移，同 <Left> 键
vim move: j                                 # 光标下移，同 <Down> 键
vim move: k                                 # 光标上移，同 <Up> 键
vim move: l                                 # 光标右移，同 <Right> 键
vim move: CTRL-F                            # 下一页
vim move: CTRL-B                            # 上一页
vim move: CTRL-U                            # 上移半屏
vim move: CTRL-D                            # 下移半屏
vim move: 0                                 # 跳到行首（是数字零，不是字母O），效用等同于 <Home> 键
vim move: ^                                 # 跳到从行首开始第一个非空白字符
vim move: $                                 # 跳到行尾，效用等同于 <End> 键
vim move: gg                                # 跳到第一行，效用等同于 CTRL+<Home>
vim move: G                                 # 跳到最后一行，效用等同于 CTRL+<End>
vim move: nG                                # 跳到第n行，比如 10G 是移动到第十行
vim move: :n                                # 跳到第n行，比如 :10<回车> 是移动到第十行
vim move: 10%                               # 移动到文件 10% 处
vim move: 15|                               # 移动到当前行的 15列
vim move: w                                 # 跳到下一个单词开头 (word: 标点或空格分隔的单词)
vim move: W                                 # 跳到下一个单词开头 (WORD: 空格分隔的单词)
vim move: e                                 # 跳到下一个单词尾部 (word: 标点或空格分隔的单词)
vim move: E                                 # 跳到下一个单词尾部 (WORD: 空格分隔的单词)
vim move: b                                 # 上一个单词头 (word: 标点或空格分隔的单词)
vim move: B                                 # 上一个单词头 (WORD: 空格分隔的单词)
vim move: ge                                # 上一个单词尾
vim move: )                                 # 向前移动一个句子（句号分隔）
vim move: (                                 # 向后移动一个句子（句号分隔）
vim move: }                                 # 向前移动一个段落（空行分隔）
vim move: {                                 # 向后移动一个段落（空行分隔）
vim move: <enter>                           # 移动到下一行首个非空字符
vim move: +                                 # 移动到下一行首个非空字符（同回车键）
vim move: -                                 # 移动到上一行首个非空字符
vim move: H                                 # 移动到屏幕上部
vim move: M                                 # 移动到屏幕中部
vim move: L                                 # 移动到屏幕下部
vim move: fx                                # 跳转到下一个为 x 的字符，2f/ 可以找到第二个斜杆
vim move: Fx                                # 跳转到上一个为 x 的字符
vim move: tx                                # 跳转到下一个为 x 的字符前
vim move: Tx                                # 跳转到上一个为 x 的字符前
vim move: ;                                 # 跳到下一个 f/t 搜索的结果
vim move: ,                                 # 跳到上一个 f/t 搜索的结果
vim move: <S-Left>                          # 按住 SHIFT 按左键，向左移动一个单词
vim move: <S-Right>                         # 按住 SHIFT 按右键，向右移动一个单词
vim move: <S-Up>                            # 按住 SHIFT 按上键，向上翻页
vim move: <S-Down>                          # 按住 SHIFT 按下键，向下翻页
vim move: gm                                # 移动到行中
vim move: gj                                # 光标下移一行（忽略自动换行）
vim move: gk                                # 光标上移一行（忽略自动换行）
-------------------------------------- VIM INSERT MODE --------------------------------------
vim insert: i                               # 在光标处进入插入模式
vim insert: I                               # 在行首进入插入模式
vim insert: a                               # 在光标后进入插入模式
vim insert: A                               # 在行尾进入插入模式
vim insert: o                               # 在下一行插入新行并进入插入模式
vim insert: O                               # 在上一行插入新行并进入插入模式
vim insert: ea                              # 在单词后面插入模式
vim insert: gi                              # 进入到上一次插入模式的位置
vim insert: <ESC>                           # 退出插入模式
vim insert: CTRL-[                          # 退出插入模式（同 ESC 等价，但更顺手）
-------------------------------------- VIM INSERT MODE AFTER --------------------------------
vim insert: <Up>                            # 光标向上移动
vim insert: <Down>                          # 光标向下移动
vim insert: <Left>                          # 光标向左移动
vim insert: <Right>                         # 光标向右移动
vim insert: <S-Left>                        # 按住 SHIFT 按左键，向左移动一个单词
vim insert: <S-Right>                       # 按住 SHIFT 按右键，向右移动一个单词
vim insert: <S-Up>                          # 按住 SHIFT 按上键，向上翻页
vim insert: <S-Down>                        # 按住 SHIFT 按下键，向下翻页
vim insert: <PageUp>                        # 上翻页
vim insert: <PageDown>                      # 下翻页
vim insert: <Delete>                        # 删除光标处字符
vim insert: <BS>                            # Backspace 向后删除字符
vim insert: <Home>                          # 光标跳转行首
vim insert: <End>                           # 光标跳转行尾
vim insert: CTRL-W                          # 向后删除单词
vim insert: CTRL-O                          # 临时退出插入模式，执行单条命令又返回插入模式
vim insert: CTRL-\ CTRL-O                   # 临时退出插入模式（光标保持），执行单条命令又返回插入模式
vim insert: CTRL-R 0                        # 插入寄存器（内部 0号剪贴板）内容，CTRL-R 后可跟寄存器名
vim insert: CTRL-R "                        # 插入匿名寄存器内容，相当于插入模式下 p粘贴
vim insert: CTRL-R =                        # 插入表达式计算结果，等号后面跟表达式
vim insert: CTRL-R :                        # 插入上一次命令行命令
vim insert: CTRL-R /                        # 插入上一次搜索的关键字
vim insert: CTRL-F                          # 自动缩进
vim insert: CTRL-U                          # 删除当前行所有字符
vim insert: CTRL-V {char}                   # 插入非数字的字面量
vim insert: CTRL-V {number}                 # 插入三个数字代表的 ascii/unicode 字符
vim insert: CTRL-V 065                      # 插入 10进制 ascii 字符（两数字） 065 即 A字符
vim insert: CTRL-V x41                      # 插入 16进制 ascii 字符（三数字） x41 即 A字符
vim insert: CTRL-V o101                     # 插入  8进制 ascii 字符（三数字） o101 即 A字符
vim insert: CTRL-V u1234                    # 插入 16进制 unicode 字符（四数字）
vim insert: CTRL-V U12345678                # 插入 16进制 unicode 字符（八数字）
vim insert: CTRL-K {ch1} {ch2}              # 插入 digraph（见 :h digraph），快速输入日文或符号等
vim insert: CTRL-D                          # 文字向前缩进
vim insert: CTRL-T                          # 文字向后缩进
---------------------------------------- VIM EDIT -------------------------------------------
vim edit: r                                 # 替换当前字符
vim edit: R                                 # 进入替换模式，直至 ESC 离开
vim edit: s                                 # 替换字符（删除光标处字符，并进入插入模式，前可接数量）
vim edit: S                                 # 替换行（删除当前行，并进入插入模式，前可接数量）
vim edit: cc                                # 改写当前行（删除当前行并进入插入模式），同 S
vim edit: cw                                # 改写光标开始处的当前单词
vim edit: ciw                               # 改写光标所处的单词
vim edit: caw                               # 改写光标所处的单词，并且包括前后空格（如果有的话）
vim edit: c0                                # 改写到行首
vim edit: c^                                # 改写到行首（第一个非零字符）
vim edit: c$                                # 改写到行末
vim edit: C                                 # 改写到行尾（同c$）
vim edit: ci"                               # 改写双引号中的内容
vim edit: ci'                               # 改写单引号中的内容
vim edit: cib                               # 改写小括号中的内容
vim edit: cab                               # 改写小括号中的内容（包含小括号本身）
vim edit: ci)                               # 改写小括号中的内容
vim edit: ci]                               # 改写中括号中内容
vim edit: ciB                               # 改写大括号中内容
vim edit: caB                               # 改写大括号中的内容（包含大括号本身）
vim edit: ci}                               # 改写大括号中内容
vim edit: cit                               # 改写 xml tag 中的内容
vim edit: cis                               # 改写当前句子
vim edit: c2w                               # 改写下两个单词
vim edit: ct(                               # 改写到小括号前
vim edit: c/apple                           # 改写到光标后的第一个apple前
vim edit: x                                 # 删除当前字符，前面可以接数字，3x代表删除三个字符
vim edit: X                                 # 向前删除字符
vim edit: dd                                # 删除当前行
vim edit: d0                                # 删除到行首
vim edit: d^                                # 删除到行首（第一个非零字符）
vim edit: d$                                # 删除到行末
vim edit: D                                 # 删除到行末（同 d$）
vim edit: dw                                # 删除当前单词
vim edit: diw                               # 删除光标所处的单词
vim edit: daw                               # 删除光标所处的单词，并包含前后空格（如果有的话）
vim edit: di"                               # 删除双引号中的内容
vim edit: di'                               # 删除单引号中的内容
vim edit: dib                               # 删除小括号中的内容
vim edit: di)                               # 删除小括号中的内容
vim edit: dab                               # 删除小括号内的内容（包含小括号本身）
vim edit: di]                               # 删除中括号中内容
vim edit: diB                               # 删除大括号中内容
vim edit: di}                               # 删除大括号中内容
vim edit: daB                               # 删除大括号内的内容（包含大括号本身）
vim edit: dit                               # 删除 xml tag 中的内容
vim edit: dis                               # 删除当前句子
vim edit: dip                               # 删除当前段落(前后有空白行的称为一个段落)
vim edit: dap                               # 删除当前段落(包括前后空白行)
vim edit: d2w                               # 删除下两个单词
vim edit: dt(                               # 删除到小括号前
vim edit: d/apple                           # 删除到光标后的第一个apple前
vim edit: dgg                               # 删除到文件头部
vim edit: dG                                # 删除到文件尾部
vim edit: d}                                # 删除下一段
vim edit: d{                                # 删除上一段
vim edit: u                                 # 撤销
vim edit: U                                 # 撤销整行操作
vim edit: CTRL-R                            # 撤销上一次 u 命令
vim edit: J                                 # 链接多行为一行
vim edit: .                                 # 重复上一次操作
vim edit: ~                                 # 替换大小写
vim edit: g~iw                              # 替换当前单词的大小写
vim edit: gUiw                              # 将单词转成大写
vim edit: guiw                              # 将当前单词转成小写
vim edit: guu                               # 全行转为小写
vim edit: gUU                               # 全行转为大写
vim edit: <<                                # 减少缩进
vim edit: >>                                # 增加缩进
vim edit: ==                                # 自动缩进
vim edit: CTRL-A                            # 增加数字
vim edit: CTRL-X                            # 减少数字
------------------------------------ VIM CUT & PASTE ----------------------------------------
vim cut paste: p                            # 粘贴到光标后
vim cut paste: P                            # 粘贴到光标前
vim cut paste: v                            # 开始标记
vim cut paste: y                            # 复制标记内容
vim cut paste: V                            # 开始按行标记
vim cut paste: CTRL-V                       # 开始列标记
vim cut paste: y$                           # 复制当前位置到本行结束的内容
vim cut paste: yy                           # 复制当前行
vim cut paste: Y                            # 复制当前行，同 yy
vim cut paste: yiw                          # 复制当前单词
vim cut paste: 3yy                          # 复制光标下三行内容
vim cut paste: v0                           # 选中当前位置到行首
vim cut paste: v$                           # 选中当前位置到行末
vim cut paste: viw                          # 选中当前单词
vim cut paste: vib                          # 选中小括号内的东西
vim cut paste: vi)                          # 选中小括号内的东西
vim cut paste: vi]                          # 选中中括号内的东西
vim cut paste: viB                          # 选中大括号内的东西
vim cut paste: vi}                          # 选中大括号内的东西
vim cut paste: vis                          # 选中句子中的东西
vim cut paste: vip                          # 选中当前段落(前后有空白行的称为一个段落)
vim cut paste: vap                          # 选中当前段落(包括前后空白行)
vim cut paste: vab                          # 选中小括号内的东西（包含小括号本身）
vim cut paste: va)                          # 选中小括号内的东西（包含小括号本身）
vim cut paste: va]                          # 选中中括号内的东西（包含中括号本身）
vim cut paste: vaB                          # 选中大括号内的东西（包含大括号本身）
vim cut paste: va}                          # 选中大括号内的东西（包含大括号本身）
vim cut paste: gv                           # 重新选择上一次选中的文字
vim cut paste: :set paste                   # 允许粘贴模式（避免粘贴时自动缩进影响格式）
vim cut paste: :set nopaste                 # 禁止粘贴模式
vim cut paste: "?yy                         # 复制当前行到寄存器 ? ，问号代表 0-9 的寄存器名称
vim cut paste: "?d3j                        # 删除光标下三行内容，并放到寄存器 ? ，问号代表 0-9 的寄存器名称
vim cut paste: "?p                          # 将寄存器 ? 的内容粘贴到光标后
vim cut paste: "?P                          # 将寄存器 ? 的内容粘贴到光标前
vim cut paste: :registers                   # 显示所有寄存器内容
vim cut paste: :[range]y                    # 复制范围，比如 :20,30y 是复制20到30行，:10y 是复制第十行
vim cut paste: :[range]d                    # 删除范围，比如 :20,30d 是删除20到30行，:10d 是删除第十行
vim cut paste: ddp                          # 交换两行内容：先删除当前行复制到寄存器，并粘贴
vim cut paste: "_[command]                  # 使用[command]删除内容，并且不进行复制（不会污染寄存器）
vim cut paste: "*[command]                  # 使用[command]复制内容到系统剪贴板（需要vim版本有clipboard支持）
--------------------------------------- VIM WORD ACTION -------------------------------------
vim word: $                                 # 到行末
vim word: 0                                 # 到行首
vim word: ^                                 # 到行首非空字符
vim word: tx                                # 光标位置到字符 x 之前
vim word: fx                                # 光标位置到字符 x 之处
vim word: iw                                # 整个单词（不包括分隔符）
vim word: aw                                # 整个单词（包括分隔符）
vim word: iW                                # 整个 WORD（不包括分隔符）
vim word: aW                                # 整个 WORD（包括分隔符）
vim word: is                                # 整个句子（不包括分隔符）
vim word: as                                # 整个句子（包括分隔符）
vim word: ip                                # 整个段落（不包括前后空白行）
vim word: ap                                # 整个段落（包括前后空白行）
vim word: ib                                # 小括号内
vim word: ab                                # 小括号内（包含小括号本身）
vim word: iB                                # 大括号内
vim word: aB                                # 大括号内（包含大括号本身）
vim word: i)                                # 小括号内
vim word: a)                                # 小括号内（包含小括号本身）
vim word: i]                                # 中括号内
vim word: a]                                # 中括号内（包含中括号本身）
vim word: i}                                # 大括号内
vim word: a}                                # 大括号内（包含大括号本身）
vim word: i'                                # 单引号内
vim word: a'                                # 单引号内（包含单引号本身）
vim word: i"                                # 双引号内
vim word: a"                                # 双引号内（包含双引号本身）
vim word: 2i)                               # 往外两层小括号内
vim word: 2a)                               # 往外两层小括号内（包含小括号本身）
vim word: 2f)                               # 到第二个小括号处
vim word: 2t)                               # 到第二个小括号前
--------------------------------- VIM SEARCH & REPLACE --------------------------------------
vim search replace: /pattern                # 从光标处向文件尾搜索 pattern
vim search replace: ?pattern                # 从光标处向文件头搜索 pattern
vim search replace: n                       # 向同一方向执行上一次搜索
vim search replace: N                       # 向相反方向执行上一次搜索
vim search replace: *                       # 向前搜索光标下的单词
vim search replace: #                       # 向后搜索光标下的单词
vim search replace: :s/p1/p2/g              # 将当前行中全替换p1为p2
vim search replace: :%s/p1/p2/g             # 将当前文件中全替换p1为p2
vim search replace: :%s/p1/p2/gc            # 将当前文件中全替换p1为p2，并且每处询问你是否替换
vim search replace: :10,20s/p1/p2/g         # 将第10到20行中所有p1替换为p2
vim search replace: :., ns/p1/p2/g          # 将当前行到n行中所有p1替换为p2
vim search replace: :., +10s/p1/p2/g        # 将当前行到相对当前行加10行的区间中所有p1替换为p2
vim search replace: :., $s/p1/p2/g          # 将当前行到最后一行中所有p1替换为p2
vim search replace: :%s/1\\2\/3/123/g       # 将“1\2/3” 替换为 “123”（特殊字符使用反斜杠标注）
vim search replace: :%s/\r//g               # 删除 DOS 换行符 ^M
---------------------------------- VIM VISUAL COMMANDS --------------------------------------
vim visual: >                               # 增加缩进
vim visual: <                               # 减少缩进
vim visual: d                               # 删除高亮选中的文字
vim visual: x                               # 删除高亮选中的文字
vim visual: c                               # 改写文字，即删除高亮选中的文字并进入插入模式
vim visual: s                               # 改写文字，即删除高亮选中的文字并进入插入模式
vim visual: y                               # 拷贝文字
vim visual: ~                               # 转换大小写
vim visual: o                               # 跳转到标记区的另外一端
vim visual: O                               # 跳转到标记块的另外一端
vim visual: u                               # 标记区转换为小写
vim visual: U                               # 标记区转换为大写
vim visual: g CTRL-G                        # 显示所选择区域的统计信息
vim visual: <Esc>                           # 退出可视模式
---------------------------------- VIM POSITION JUMP ----------------------------------------
vim jump: CTRL-O                            # 跳转到上一个位置
vim jump: CTRL-I                            # 跳转到下一个位置
vim jump: CTRL-^                            # 跳转到 alternate file (当前窗口的上一个文件）
vim jump: %                                 # 跳转到 {} () [] 的匹配
vim jump: gd                                # 跳转到局部定义（光标下的单词的定义）
vim jump: gD                                # 跳转到全局定义（光标下的单词的定义）
vim jump: gf                                # 打开名称为光标下文件名的文件
vim jump: [[                                # 跳转到上一个顶层函数（比如C语言以大括号分隔）
vim jump: ]]                                # 跳转到下一个顶层函数（比如C语言以大括号分隔）
vim jump: [m                                # 跳转到上一个成员函数
vim jump: ]m                                # 跳转到下一个成员函数
vim jump: [{                                # 跳转到上一处未匹配的 {
vim jump: ]}                                # 跳转到下一处未匹配的 }
vim jump: [(                                # 跳转到上一处未匹配的 (
vim jump: ])                                # 跳转到下一处未匹配的 )
vim jump: [c                                # 上一个不同处（diff时）
vim jump: ]c                                # 下一个不同处（diff时）
vim jump: [/                                # 跳转到 C注释开头
vim jump: ]/                                # 跳转到 C注释结尾
vim jump: ``                                # 回到上次跳转的位置
vim jump: ''                                # 回到上次跳转的位置
vim jump: `.                                # 回到上次编辑的位置
vim jump: '.                                # 回到上次编辑的位置
---------------------------------- VIM FILE ACTION ------------------------------------------
vim file action: :w                         # 保存文件
vim file action: :w <filename>              # 按名称保存文件
vim file action: :e <filename>              # 打开文件并编辑
vim file action: :saveas <filename>         # 另存为文件
vim file action: :r <filename>              # 读取文件并将内容插入到光标后
vim file action: :r !dir                    # 将 dir 命令的输出捕获并插入到光标后
vim file action: :close                     # 关闭文件
vim file action: :q                         # 退出
vim file action: :q!                        # 强制退出
vim file action: :wa                        # 保存所有文件
vim file action: :cd <path>                 # 切换 Vim 当前路径
vim file action: :pwd                       # 显示 Vim 当前路径
vim file action: :new                       # 打开一个新的窗口编辑新文件
vim file action: :enew                      # 在当前窗口创建新文件
vim file action: :vnew                      # 在左右切分的新窗口中编辑新文件
vim file action: :tabnew                    # 在新的标签页中编辑新文件
---------------------------------- VIM BUFFER -----------------------------------------------
vim buffer: :ls                             # 查案缓存列表
vim buffer: :bn                             # 切换到下一个缓存
vim buffer: :bp                             # 切换到上一个缓存
vim buffer: :bd                             # 删除缓存
vim buffer: :b 1                            # 切换到1号缓存
vim buffer: :b abc                          # 切换到文件名为 abc 开头的缓存
vim buffer: :badd <filename>                # 将文件添加到缓存列表
vim buffer: :set hidden                     # 设置隐藏模式（未保存的缓存可以被切换走，或者关闭）
vim buffer: :set nohidden                   # 关闭隐藏模式（未保存的缓存不能被切换走，或者关闭）
vim buffer: n CTRL-^                        # 切换缓存，先输入数字的缓存编号，再按 CTRL + 6
---------------------------------- VIM WINDOWS ----------------------------------------------
vim windows: :sp <filename>                 # 上下切分窗口并在新窗口打开文件 filename
vim windows: :vs <filename>                 # 左右切分窗口并在新窗口打开文件 filename
vim windows: CTRL-W s                       # 上下切分窗口
vim windows: CTRL-W v                       # 左右切分窗口
vim windows: CTRL-W w                       # 循环切换到下一个窗口
vim windows: CTRL-W W                       # 循环切换到上一个窗口
vim windows: CTRL-W p                       # 跳到上一个访问过的窗口
vim windows: CTRL-W c                       # 关闭当前窗口
vim windows: CTRL-W o                       # 关闭其他窗口
vim windows: CTRL-W h                       # 跳到左边的窗口
vim windows: CTRL-W j                       # 跳到下边的窗口
vim windows: CTRL-W k                       # 跳到上边的窗口
vim windows: CTRL-W l                       # 跳到右边的窗口
vim windows: CTRL-W +                       # 增加当前窗口的行高，前面可以加数字
vim windows: CTRL-W -                       # 减少当前窗口的行高，前面可以加数字
vim windows: CTRL-W <                       # 减少当前窗口的列宽，前面可以加数字
vim windows: CTRL-W >                       # 增加当前窗口的列宽，前面可以加数字
vim windows: CTRL-W =                       # 让所有窗口宽高相同
vim windows: CTRL-W H                       # 将当前窗口移动到最左边
vim windows: CTRL-W J                       # 将当前窗口移动到最下边
vim windows: CTRL-W K                       # 将当前窗口移动到最上边
vim windows: CTRL-W L                       # 将当前窗口移动到最右边
vim windows: CTRL-W x                       # 交换窗口
vim windows: CTRL-W f                       # 在新窗口中打开名为光标下文件名的文件
vim windows: CTRL-W gf                      # 在新标签页中打开名为光标下文件名的文件
vim windows: CTRL-W R                       # 旋转窗口
vim windows: CTRL-W T                       # 将当前窗口移到新的标签页中
vim windows: CTRL-W P                       # 跳转到预览窗口
vim windows: CTRL-W z                       # 关闭预览窗口
vim windows: CTRL-W _                       # 纵向最大化当前窗口
vim windows: CTRL-W |                       # 横向最大化当前窗口
--------------------------------------- VIM TABS --------------------------------------------
vim tabs: :tabs                             # 显示所有标签页
vim tabs: :tabe <filename>                  # 在新标签页中打开文件 filename
vim tabs: :tabn                             # 下一个标签页
vim tabs: :tabp                             # 上一个标签页
vim tabs: :tabc                             # 关闭当前标签页
vim tabs: :tabo                             # 关闭其他标签页
vim tabs: :tabn n                           # 切换到第n个标签页，比如 :tabn 3 切换到第三个标签页
vim tabs: :tabm n                           # 标签移动
vim tabs: :tabfirst                         # 切换到第一个标签页
vim tabs: :tablast                          # 切换到最后一个标签页
vim tabs: :tab help                         # 在标签页打开帮助
vim tabs: :tab drop <file>                  # 如果文件已被其他标签页和窗口打开则跳过去，否则新标签打开
vim tabs: :tab split                        # 在新的标签页中打开当前窗口里的文件
vim tabs: :tab ball                         # 将缓存中所有文件用标签页打开
vim tabs: :set showtabline=?                # 设置为 0 就不显示标签页标签，1会按需显示，2会永久显示
vim tabs: ngt                               # 切换到第n个标签页，比如 2gt 将会切换到第二个标签页
vim tabs: gt                                # 下一个标签页
vim tabs: gT                                # 上一个标签页
--------------------------------------- VIM BOOKMARK ----------------------------------------
vim bookmark: :marks                        # 显示所有书签
vim bookmark: ma                            # 保存当前位置到书签 a ，书签名小写字母为文件内，大写全局
vim bookmark: 'a                            # 跳转到书签 a所在的行
vim bookmark: `a                            # 跳转到书签 a所在位置
vim bookmark: `.                            # 跳转到上一次编辑的行
vim bookmark: 'A                            # 跳转到全文书签 A
vim bookmark: ['                            # 跳转到上一个书签
vim bookmark: ]'                            # 跳转到下一个书签
vim bookmark: '<                            # 跳到上次可视模式选择区域的开始
vim bookmark: '>                            # 跳到上次可视模式选择区域的结束
vim bookmark: :delm a                       # 删除缓冲区标签a
vim bookmark: :delm A                       # 删除文件标签A
vim bookmark: :delm!                        # 删除所有缓冲区标签(小写字母), 不能删除文件标签和数字标签
vim bookmark: :delm A-Z                     # 删除所有文件标签(大写字母)
vim bookmark: :delm 0-9                     # 删除所有数字标签(.viminfo)
vim bookmark: :delm A-Z0-9                  # 删除所有文件标签和数字标签
--------------------------------------- VIM SETTINGS ----------------------------------------
vim settings: :set nocompatible             # 设置不兼容原始 vi 模式（必须设置在最开头）
vim settings: :set bs=?                     # 设置BS键模式，现代编辑器为 :set bs=eol,start,indent
vim settings: :set sw=4                     # 设置缩进宽度为 4
vim settings: :set ts=4                     # 设置制表符宽度为 4
vim settings: :set noet                     # 设置不展开 tab 成空格
vim settings: :set et                       # 设置展开 tab 成空格
vim settings: :set winaltkeys=no            # 设置 GVim 下正常捕获 ALT 键
vim settings: :set nowrap                   # 关闭自动换行
vim settings: :set ttimeout                 # 允许终端按键检测超时（终端下功能键为一串ESC开头的扫描码）
vim settings: :set ttm=100                  # 设置终端按键检测超时为100毫秒
vim settings: :set term=?                   # 设置终端类型，比如常见的 xterm
vim settings: :set ignorecase               # 设置搜索忽略大小写(可缩写为 :set ic)
vim settings: :set noignorecase             # 设置搜索不忽略大小写(可缩写为 :set noic)
vim settings: :set smartcase                # 智能大小写，默认忽略大小写，除非搜索内容里包含大写字母
vim settings: :set list                     # 设置显示制表符和换行符
vim settings: :set number                   # 设置显示行号，禁止显示行号可以用 :set nonumber
vim settings: :set relativenumber           # 设置显示相对行号（其他行与当前行的距离）
vim settings: :set paste                    # 进入粘贴模式（粘贴时禁用缩进等影响格式的东西）
vim settings: :set nopaste                  # 结束粘贴模式
vim settings: :set spell                    # 允许拼写检查
vim settings: :set hlsearch                 # 设置高亮查找
vim settings: :set ruler                    # 总是显示光标位置
vim settings: :set incsearch                # 查找输入时动态增量显示查找结果
vim settings: :set insertmode               # Vim 始终处于插入模式下，使用 ctrl-o 临时执行命令
vim settings: :set all                      # 列出所有选项设置情况
vim settings: :syntax on                    # 允许语法高亮
vim settings: :syntax off                   # 禁止语法高亮
--------------------------------------- VIM HELP --------------------------------------------
vim help: :h tutor                          # 入门文档
vim help: :h quickref                       # 快速帮助
vim help: :h index                          # 查询 Vim 所有键盘命令定义
vim help: :h summary                        # 帮助你更好的使用内置帮助系统
vim help: :h CTRL-H                         # 查询普通模式下 CTRL-H 是干什么的
vim help: :h i_CTRL-H                       # 查询插入模式下 CTRL-H 是干什么的
vim help: :h i_<Up>                         # 查询插入模式下方向键上是干什么的
vim help: :h pattern.txt                    # 正则表达式帮助
vim help: :h eval                           # 脚本编写帮助
vim help: :h function-list                  # 查看 VimScript 的函数列表 
vim help: :h windows.txt                    # 窗口使用帮助
vim help: :h tabpage.txt                    # 标签页使用帮助
vim help: :h +timers                        # 显示对 +timers 特性的帮助
vim help: :h :!                             # 查看如何运行外部命令
vim help: :h tips                           # 查看 Vim 内置的常用技巧文档
vim help: :h set-termcap                    # 查看如何设置按键扫描码
vim help: :viusage                          # NORMAL 模式帮助
vim help: :exusage                          # EX 命令帮助
vim help: :version                          # 显示当前 Vim 的版本号和特性
--------------------------------------- VIM EXTERNAL COMMAND --------------------------------
vim extermal command: :!ls                  # 运行外部命令 ls，并等待返回
vim extermal command: :r !ls                # 将外部命令 ls 的输出捕获，并插入到光标后
vim extermal command: :w !sudo tee %        # sudo以后保存当前文件
vim extermal command: :call system('ls')    # 调用 ls 命令，但是不显示返回内容
vim extermal command: :!start notepad       # Windows 下启动 notepad，最前面可以加 silent
vim extermal command: :sil !start cmd       # Windows 下当前目录打开 cmd
vim extermal command: :%!prog               # 运行文字过滤程序，如整理 json格式 :%!python -m json.tool
--------------------------------------- VIM QUICKFIX ----------------------------------------
vim quickfix: :copen                        # 打开 quickfix 窗口（查看编译，grep等信息）
vim quickfix: :copen 10                     # 打开 quickfix 窗口，并且设置高度为 10
vim quickfix: :cclose                       # 关闭 quickfix 窗口
vim quickfix: :cfirst                       # 跳到 quickfix 中第一个错误信息
vim quickfix: :clast                        # 跳到 quickfix 中最后一条错误信息
vim quickfix: :cc [nr]                      # 查看错误 [nr]
vim quickfix: :cnext                        # 跳到 quickfix 中下一个错误信息
vim quickfix: :cprev                        # 跳到 quickfix 中上一个错误信息
--------------------------------------- VIM SPELL CHECK -------------------------------------
vim spell check: :set spell                 # 打开拼写检查
vim spell check: :set nospell               # 关闭拼写检查
vim spell check: ]s                         # 下一处错误拼写的单词
vim spell check: [s                         # 上一处错误拼写的单词
vim spell check: zg                         # 加入单词到拼写词表中
vim spell check: zug                        # 撤销上一次加入的单词
vim spell check: z=                         # 拼写建议
--------------------------------------- VIM CODE FOLDING ------------------------------------
vim folding: za                             # 切换折叠
vim folding: zA                             # 递归切换折叠
vim folding: zc                             # 折叠光标下代码
vim folding: zC                             # 折叠光标下所有代码
vim folding: zd                             # 删除光标下折叠
vim folding: zD                             # 递归删除所有折叠
vim folding: zE                             # 删除所有折叠
vim folding: zf                             # 创建代码折叠
vim folding: zF                             # 指定行数创建折叠
vim folding: zi                             # 切换折叠
vim folding: zm                             # 所有代码折叠一层
vim folding: zr                             # 所有代码打开一层
vim folding: zM                             # 折叠所有代码，设置 foldlevel=0，设置 foldenable
vim folding: zR                             # 打开所有代码，设置 foldlevel 为最大值
vim folding: zn                             # 折叠 none，重置 foldenable 并打开所有代码
vim folding: zN                             # 折叠 normal，重置 foldenable 并恢复所有折叠
vim folding: zo                             # 打开一层代码
vim folding: zO                             # 打开光标下所有代码折叠
--------------------------------------- VIM MACRO -------------------------------------------
vim macro: qa                               # 开始录制名字为 a 的宏
vim macro: q                                # 结束录制宏
vim macro: @a                               # 播放名字为 a 的宏
vim macro: @@                               # 播放上一个宏
vim macro: @:                               # 重复上一个ex命令（即冒号命令）
--------------------------------------- VIM OTHER COMMAND -----------------------------------
vim other command: CTRL-X CTRL-F            # 插入模式下文件路径补全
vim other command: CTRL-X CTRL-O            # 插入下 Omnifunc 补全
vim other command: CTRL-X CTRL-N            # 插入模式下关键字补全
vim other command: CTRL-X CTRL-E            # 插入模式下向上滚屏
vim other command: CTRL-X CTRL-Y            # 插入模式下向下滚屏
vim other command: CTRL-E                   # 向上滚屏
vim other command: CTRL-Y                   # 向下滚屏
vim other command: CTRL-G                   # 显示正在编辑的文件名，以及大小和位置信息
vim other command: g CTRL-G                 # 显示文件的：大小，字符数，单词数和行数，可视模式下也可用
vim other command: zz                       # 调整光标所在行到屏幕中央
vim other command: zt                       # 调整光标所在行到屏幕上部
vim other command: zb                       # 调整光标所在行到屏幕下部
vim other command: ga                       # 显示光标下字符的 ascii 码或者 unicode 编码
vim other command: g8                       # 显示光标下字符的 utf-8 编码字节序
vim other command: gi                       # 回到上次进入插入的地方，并切换到插入模式
vim other command: K                        # 查询光标下单词的帮助
vim other command: ZZ                       # 保存文件（如果有改动的话），并关闭窗口
vim other command: ZQ                       # 不保存文件关闭窗口
vim other command: CTRL-PgUp                # 上个标签页，GVim OK，部分终端软件需设置对应键盘码
vim other command: CTRL-PgDown              # 下个标签页，GVim OK，部分终端软件需设置对应键盘码
vim other command: CTRL-R CTRL-W            # 命令模式下插入光标下单词
vim other command: CTRL-INSERT              # 复制到系统剪贴板（GVIM）
vim other command: SHIFT-INSERT             # 粘贴系统剪贴板的内容（GVIM）
vim other command: :set ff=unix             # 设置换行为 unix
vim other command: :set ff=dos              # 设置换行为 dos
vim other command: :set ff?                 # 查看换行设置
vim other command: :set nohl                # 清除搜索高亮
vim other command: :set termcap             # 查看会从终端接收什么以及会发送给终端什么命令
vim other command: :set guicursor=          # 解决 SecureCRT/PenguiNet 中 NeoVim 局部奇怪字符问题
vim other command: :set t_RS= t_SH=         # 解决 SecureCRT/PenguiNet 中 Vim8.0 终端功能奇怪字符
vim other command: :set fo+=a               # 开启文本段的实时自动格式化
vim other command: :earlier 15m             # 回退到15分钟前的文件内容
vim other command: :.!date                  # 在当前窗口插入时间
vim other command: :%!xxd                   # 开始二进制编辑
vim other command: :%!xxd -r                # 保存二进制编辑
vim other command: :r !curl -sL {URL}       # 读取 url 内容添加到光标后
vim other command: :g/^\s*$/d               # 删除空行
vim other command: :g/green/d               # 删除所有包含 green 的行
vim other command: :v/green/d               # 删除所有不包含 green 的行
vim other command: :g/gladiolli/#           # 搜索单词打印结果，并在结果前加上行号
vim other command: :g/ab.*cd.*efg/#         # 搜索包含 ab,cd 和 efg 的行，打印结果以及行号
vim other command: :v/./,/./-j              # 压缩空行
vim other command: :Man bash                # 在 Vim 中查看 man，先调用 :runtime! ftplugin/man.vim 激活
vim other command: /fred\|joe               # 搜索 fred 或者 joe
vim other command: /\<\d\d\d\d\>            # 精确搜索四个数字
vim other command: /^\n\{3}                 # 搜索连续三个空行
--------------------------------------- VIM PLUG VIM-COMMENTARY -----------------------------
vim plug vim commentary: gcc                # 注释当前行
vim plug vim commentary: gc{motion}         # 注释 {motion} 所标注的区域，比如 gcap 注释整段
vim plug vim commentary: gci{               # 注释大括号内的内容
vim plug vim commentary: gc                 # 在 Visual Mode 下面按 gc 注释选中区域
vim plug vim commentary: :7,17Commentary    # 注释 7 到 17 行
--------------------------------------- VIM PLUG VIM-EASY-ALIGN -----------------------------
vim plug vim easy align: :EasyAlign =       # 以第一个匹配的=为中心对齐
vim plug vim easy align: :EasyAlign *=      # 匹配并且对齐所有=
--------------------------------------- VIM PLUG VIM-UNIMPAIRED -----------------------------
vim plug vim unimpaired: [space             # 向上插入空行
vim plug vim unimpaired: ]space             # 向下插入空行
vim plug vim unimpaired: [e                 # 替换当前行和上一行
vim plug vim unimpaired: ]e                 # 替换当前行和下一行
vim plug vim unimpaired: [x                 # XML 编码
vim plug vim unimpaired: ]x                 # XML 解码
vim plug vim unimpaired: [u                 # URL 编码
vim plug vim unimpaired: ]u                 # URL 解码
vim plug vim unimpaired: [y                 # C 字符串编码
vim plug vim unimpaired: ]y                 # C 字符串解码
vim plug vim unimpaired: [q                 # 上一个 quickfix 错误
vim plug vim unimpaired: ]q                 # 下一个 quickfix 错误
vim plug vim unimpaired: [Q                 # 第一个 quickfix 错误
vim plug vim unimpaired: ]Q                 # 最后一个 quickfix 错误
vim plug vim unimpaired: [f                 # 切换同目录里上一个文件
vim plug vim unimpaired: ]f                 # 切换同目录里下一个文件
vim plug vim unimpaired: [os                # 设置 :set spell
vim plug vim unimpaired: ]os                # 设置 :set nospell
vim plug vim unimpaired: =os                # 设置 :set invspell
vim plug vim unimpaired: [on                # 显示行号
vim plug vim unimpaired: ]on                # 关闭行号
vim plug vim unimpaired: [ol                # 显示回车和制表符 :set list
vim plug vim unimpaired: ]ol                # 不显示回车和制表符 :set nolist
vim plug vim unimpaired: [b                 # 缓存切换到上一个文件，即 :bp
vim plug vim unimpaired: ]b                 # 缓存切换到下一个文件，即 :bn
vim plug vim unimpaired: [B                 # 缓存切换到第一个文件，即 :bfirst
vim plug vim unimpaired: ]B                 # 缓存切换到最后一个文件，即 :blast
--------------------------------------- VIM PLUG ASYNCRUN -----------------------------------
vim plug asyncrun: :AsyncRun ls             # 异步运行命令 ls 结果输出到 quickfix 使用 :copen 查看
vim plug asyncrun: :AsyncRun -raw ls        # 异步运行命令 ls 结果不匹配 errorformat
--------------------------------------- VIM TIPS --------------------------------------------
vim tips:                                   # - 永远不要用 CTRL-C 代替 <ESC> 完全不同的含义，容易错误中断运行的后台脚本
vim tips:                                   # - 很多人使用 CTRL-[ 代替 <ESC>，左手小指 CTRL，右手小指 [ 熟练后很方便
vim tips:                                   # - 某些终端中使用 Vim 8 内嵌终端如看到奇怪字符，使用 :set t_RS= t_SH= 解决
vim tips:                                   # - 某些终端中使用 Vim 8.2+ 会看到一些奇怪字符，使用 :set t_TI= t_TE= 解决
vim tips:                                   # - 某些终端中使用 NeoVim 如看到奇怪字符，使用 :set guicursor= 解决
vim tips:                                   # - 使用 MS-Terminal 如果进入 Vim/NVim 会默认替换模式设置 :set t_u7= 解决
vim tips:                                   # - 多使用 ciw, ci[, ci", ci( 以及 diw, di[, di", di( 命令来快速改写/删除文本
vim tips:                                   # - 在行内左右移动光标时，多使用w b e或W B E，而不是h l或方向键，这样会快很多
vim tips:                                   # - SHIFT 相当于移动加速键， w b e 移动光标很慢，但是 W B E 走的很快
vim tips:                                   # - 自己要善于总结新技巧，比如移动到行首非空字符时用 0w 命令比 ^ 命令更容易输入
vim tips:                                   # - 在空白行使用 dip 命令可以删除所有临近的空白行，viw 可以选择连续空白
vim tips:                                   # - 缩进时使用 >8j  >}  <ap  >ap  =i}  == 会方便很多
vim tips:                                   # - 插入模式下，当你发现一个单词写错了，应该多用 CTRL-W 这比 <BackSpace> 快
vim tips:                                   # - y d c 命令可以很好结合 f t 和 /X 比如 dt) 和 y/end<cr>
vim tips:                                   # - c d x 命令会自动填充寄存器 "1 到 "9 , y 命令会自动填充 "0 寄存器
vim tips:                                   # - 用 v 命令选择文本时，可以用 o 掉头选择，有时很有用
vim tips:                                   # - 写文章时，可以写一段代码块，然后选中后执行 :!python 代码块就会被替换成结果
vim tips:                                   # - 搜索后经常使用 :nohl 来消除高亮，使用很频繁，可以 map 到 <BackSpace> 上
vim tips:                                   # - 搜索时可以用 CTRL-R CTRL-W 插入光标下的单词，命令模式也能这么用
vim tips:                                   # - 映射按键时，应该默认使用 noremap ，只有特别需要的时候使用 map
vim tips:                                   # - 当你觉得做某事很低效时，你应该停下来，u u u u 然后思考正确的高效方式来完成
vim tips:                                   # - 用 y复制文本后，命令模式中 CTRL-R 然后按双引号 0 可以插入之前复制内容
vim tips:                                   # - 某些情况下 Vim 绘制高亮慢，滚屏刷新慢可以试试 set re=1 使用老的正则引擎
vim tips:                                   # - Windows 下的 GVim 可以设置 set rop=type:directx,renmode:5 增强显示
#################################### ROFI SHORTCUTS #########################################
rofi: Ctrl-v                                # Insert: Paste from clipboard
rofi: Ctrl-Shift-v, Shift-Insert:           # Paste primary selection
rofi: Ctrl-u                                # Clear the line
rofi: Ctrl-                                 # Beginning of line
rofi: Ctrl-e                                # End of line
rofi: Ctrl-f Right                          # Forward one character
rofi: Alt-f, Ctrl-Right                     # Forward one word
rofi: Ctrl-b, Left                          # Back one character
rofi: Alt-b, Ctrl-Left                      # Back one word
rofi: Ctrl-d, Delete                        # Delete character
rofi: Ctrl-Alt-d                            # Delete word
rofi: Ctrl-h, Backspace, Shift-Backspace    # Backspace (delete previous character)
rofi: Ctrl-Alt-h                            # Delete previous word
rofi: Ctrl-j,Ctrl-m,Enter                   # Accept entry
rofi: Ctrl-n,Down                           # Select next entry
rofi: Ctrl-p,Up                             # Select previous entry
rofi: Page Up                               # Go to previous page
rofi: Page Down                             # Go to next page
rofi: Ctrl-Page Up                          # Go to previous column
rofi: Ctrl-Page Down                        # Go to next column
rofi: Ctrl-Enter                            # Use entered text as a command (in ssh/run modi)
rofi: Shift-Enter                           # Launch the application in a terminal (in run mode)
rofi: Shift-Enter                           # Return the selected entry and move to the next item while keeping rofi open. (in dmenu)
rofi: Shift-Right                           # Switch to the next mode. The list can be customized with the -switchers argument.
rofi: Shift-Left                            # Switch to the previous mode. The list can be customized with the -switchers argument.
rofi: Ctrl-Tab                              # Switch to the next mode. The list can be customized with the -switchers argument.
rofi: Ctrl-Shift-Tab                        # Switch to the previous mode. The list can be customized with the -switchers argument.
rofi: Ctrl-space                            # Set selected item as input text.
rofi: Shift-Del                             # Delete entry from history.
rofi: grave                                 # Toggle case sensitivity.
rofi: Alt-grave                             # Toggle sorting.
rofi: Alt-Shift-S                           # Take a screenshot and store it in the Pictures directory.
################################### RANGER SHORTCUTS ########################################
----------------------------------- RANGER BOOKMARKS ----------------------------------------
ranger bookmarks: m - letter                # Create bookmark
ranger bookmarks: um - letter               # Delete bookmark
ranger bookmarks: ' or `                    # Go to a bookmark
ranger bookmarks: gh                        # Go to home
----------------------------------- RANGER TABS ---------------------------------------------
ranger tabs: C-n                            # Create new tab
ranger tabs: C-w                            # Close current tab
ranger tabs: tab                            # Next tab
ranger tabs: shift + tab                    # Previous tab
ranger tabs: alt + [n]                      # goto / create [n] tab
----------------------------------- RANGER MOVEMENT -----------------------------------------
ranger movement: k                          # up
ranger movement: j                          # down
ranger movement: h                          # parent directory
ranger movement: l                          # subdirectory
ranger movement: gg                         # go to top of list
ranger movement: G                          # go t bottom of list
ranger movement: J                          # half page down
ranger movement: K                          # half page up
ranger movement: H                          # History Back
ranger movement: L                          # History Forward
----------------------------------- RANGER FILES --------------------------------------------
ranger files: <Enter>                       # Open
ranger files: r                             # open file with
ranger files: z                             # toggle settings
ranger files: o                             # change sort order
ranger files: zh                            # view hidden files
ranger files: cw                            # rename current file
ranger files: yy                            # yank / copy
ranger files: dd                            # cut
ranger files: pp                            # paste
ranger files: /                             # search for files :search
ranger files: n                             # next match
ranger files: N                             # prev match
ranger files: <del>                         # Delete
ranger: 1l                                  # Unzip selected file (uncompress)
----------------------------------- RANGER COMMANDS -----------------------------------------
ranger commands: :                          # Execute Range Command
ranger commands: !                          # Execute Shell Command
ranger commands: chmod                      # Change file Permissions
ranger commands: du                         # Disk Usage Current Directory
----------------------------------- FILE SUBSTITUTING ---------------------------------------
ranger subst: %f                            # Substitute highlighted file
ranger subst: %d                            # Substitute current directory
ranger subst: %s                            # Substitute currently selected files
ranger subst: %t                            # Substitute currently tagged files
ranger subst: :bulkrename %s                # Example for substitution
#################################### TMUX SHORTCUTS #########################################
----------------------------------- TMUX SESSION --------------------------------------------
tmux session: tmux                          # 创建新的 session
tmux session: tmux new -S name              # 创建新的 session 并指定一个name
tmux session: tmux ls                       # 查看多少个后台工作的 session
tmux session: tmux a/at/attach              # 重新连接 session
tmux session: tmux a/at/attach -t num       # 如果有多个 session, 指定 session num 连接
tmux session: tmux kill-ses -t myses        # kill 某个 session
tmux session: tmux kill-ses -a              # kill 所有 session, 除了当前的 session
tmux session: tmux kill-ses -a -t myses     # kill 所有 session, 除了 myses
tmux session: <prefix> + d                  # detach 整个session, 后续可以重新连接
tmux session: <prefix> + s                  # 列出 session
tmux session: <prefix> + $                  # 重命名 session
tmux session: <prefix> + (                  # 跳到上一个 seesion
tmux session: <prefix> + )                  # 跳到下一个 seesion
----------------------------------- TMUX PREFIX ---------------------------------------------
tmux prefix: <prefix> + key                 # <prefix> 默认为 ctrl + b
tmux prefix: <prefix> + c                   # 表示先按 ctrl + b 再按 c 键
----------------------------------- TMUX HELP -----------------------------------------------
tmux help: <prefix> + ?                     # 查看所有的 key map
----------------------------------- TMUX WINDOWS --------------------------------------------
tmux windows: <prefix> + c                  # 新建一个 window
tmux windows: <prefix> + n                  # 下一个 window
tmux windows: <prefix> + p                  # 上一个 window
tmux windows: <prefix> + w                  # 列出 window
tmux windows: <prefix> + &                  # 关闭当前 window
tmux windows: <prefix> + num[1-9]           # 选定特定 num 的 window
tmux windows: <prefix> + f                  # 查找 window
tmux windows: <prefix> + ,                  # 重命名 window
tmux windows: <prefix> + .                  # 移动 window
----------------------------------- TMUX PANES ----------------------------------------------
tmux panes: <prefix> + %                    # 纵向分裂
tmux panes: <prefix> + "                    # 横向分裂
tmux panes: <prefix> + 方向键               # 在一个 window 中切换 pane
tmux panes: <prefix> + ctrl-方向键          # 调整 pane 大小
tmux panes: <prefix> + z                    # 全屏化当前 pane, 再次执行退出全屏
tmux panes: <prefix> + x                    # 关闭当前 pane
tmux panes: <prefix> + q                    # 显示 pane 编号
tmux panes: <prefix> + o                    # 跳到下一个 pane
tmux panes: <prefix> + {                    # 跟前一个编号的 pane 交换
tmux panes: <prefix> + }                    # 跟后一个编号的 pane 交换
tmux panes: <prefix> + ;                    # 跳转到上一个活跃的 pane
tmux panes: <prefix> + !                    # 将 pane 转化为 window
tmux panes: <prefix> + <Space>              # 改变 pane 的布局
----------------------------------- TMUX MISC -----------------------------------------------
tmux misc: <prefix> + t                     # 显示时钟
tmux misc: <prefix> + :                     # 命令行
----------------------------------- TMUX SYNC -----------------------------------------------
tmux sync: :setw synchronize-panes          # 打开(关闭) pane 同步模式, 发送命令到所有的 pane 中只影响当前 window 的 pane
----------------------------------- TMUX COPY MODE ------------------------------------------
tmux copy mode: <prefix> + [                # 进入 copy mode
tmux copy mode: ^                           # 跳转到一行开头
tmux copy mode: Escape                      # 放弃选择
tmux copy mode: k                           # 上移
tmux copy mode: j                           # 下移
tmux copy mode: h                           # 左移
tmux copy mode: l                           # 右移
tmux copy mode: L                           # 最后一行
tmux copy mode: M                           # 中间一行
tmux copy mode: H                           # 第一行
tmux copy mode: $                           # 跳转到行尾
tmux copy mode: :                           # 跳转至某一行
tmux copy mode: C-d                         # 下翻半页
tmux copy mode: C-u                         # 上翻半页
tmux copy mode: C-f                         # 下翻一页
tmux copy mode: C-b                         # 上翻一页
tmux copy mode: w                           # 下一个字符
tmux copy mode: b                           # 前一个字符
tmux copy mode: q                           # 退出
tmux copy mode: ?                           # 往上查找
tmux copy mode: /                           # 往下查找
tmux copy mode: n                           # 查找下一个
tmux copy mode: Space                       # 进入选择模式
tmux copy mode: Enter                       # 确认选择内容, 并退出
tmux copy mode: <prefix> + ]                # 粘贴选择内容(粘贴 buffer_0 的内容)
tmux copy mode: :show-buffer                # 显示 buffer_0 的内容
tmux copy mode: :capture-buffer             # 复制整个能见的内容到当前的 buffer
tmux copy mode: :list-buffers               # 列出所有的 buffer
tmux copy mode: :choose-buffer              # 列出所有的 buffer, 并选择用于粘贴的 buffer
tmux copy mode: :save-buffer buf.txt        # 将 buffer 的内容复制到 buf.txt
tmux copy mode: :delete-buffer -b 1         # 删除 buffer_1
----------------------------------- TMUX MOUSE MODE -----------------------------------------
tmux mouse: :setw -g mode-mouse on          # 打开鼠标模式
tmux mouse: :set -g mouse-select-pane on    # 通过鼠标选择 pane
tmux mouse: :set -g mouse-resize-pane on    # 通过鼠标更改 pane 大小
tmux mouse: :set -g mouse-select-window on  # 通过鼠标选择 window
###################################### BASH SHORTCUTS #######################################
-------------------------------------- BASH KEYMAPPING --------------------------------------
bash hotkey: CTRL+A                         # 移动到行首，同 <Home>
bash hotkey: CTRL+B                         # 向后移动，同 <Left>
bash hotkey: CTRL+C                         # 结束当前命令
bash hotkey: CTRL+D                         # 删除光标前的字符，同 <Delete> ，或者没有内容时，退出会话
bash hotkey: CTRL+E                         # 移动到行末，同 <End>
bash hotkey: CTRL+F                         # 向前移动，同 <Right>
bash hotkey: CTRL+G                         # 退出当前编辑（比如正在 CTRL+R 搜索历史时）
bash hotkey: CTRL+H                         # 删除光标左边的字符，同 <Backspace>
bash hotkey: CTRL+K                         # 删除光标位置到行末的内容
bash hotkey: CTRL+L                         # 清屏并重新显示
bash hotkey: CTRL+N                         # 移动到命令历史的下一行，同 <Down>
bash hotkey: CTRL+O                         # 类似回车，但是会显示下一行历史
bash hotkey: CTRL+P                         # 移动到命令历史的上一行，同 <Up>
bash hotkey: CTRL+R                         # 历史命令反向搜索，使用 CTRL+G 退出搜索
bash hotkey: CTRL+S                         # 历史命令正向搜索，使用 CTRL+G 退出搜索
bash hotkey: CTRL+T                         # 交换前后两个字符
bash hotkey: CTRL+U                         # 删除字符到行首
bash hotkey: CTRL+V                         # 输入字符字面量，先按 CTRL+V 再按任意键
bash hotkey: CTRL+W                         # 删除光标左边的一个单词
bash hotkey: CTRL+X                         # 列出可能的补全
bash hotkey: CTRL+Y                         # 粘贴前面 CTRL+u/k/w 删除过的内容
bash hotkey: CTRL+Z                         # 暂停前台进程返回 bash，需要时可用 fg 将其切换回前台
bash hotkey: CTRL+_                         # 撤销（undo），有的终端将 CTRL+_ 映射为 CTRL+/ 或 CTRL+7
bash hotkey: ALT+b                          # 向后（左边）移动一个单词
bash hotkey: ALT+d                          # 删除光标后（右边）一个单词
bash hotkey: ALT+f                          # 向前（右边）移动一个单词
bash hotkey: ALT+t                          # 交换字符
bash hotkey: ALT+BACKSPACE                  # 删除光标前面一个单词，类似 CTRL+W，但不影响剪贴板
bash hotkey: CTRL+X CTRL+X                  # 连续按两次 CTRL+X，光标在当前位置和行首来回跳转
bash hotkey: CTRL+X CTRL+E                  # 用你指定的编辑器，编辑当前命令
-------------------------------------- BASH BASEACTIONS -------------------------------------
bash base: exit                             # 退出当前登陆
bash base: env                              # 显示环境变量
bash base: echo $SHELL                      # 显示你在使用什么 SHELL
bash base: bash                             # 使用 bash，用 exit 返回
bash base: which bash                       # 搜索 $PATH，查找哪个程序对应命令 bash
bash base: whereis bash                     # 搜索可执行，头文件和帮助信息的位置，使用系统内建数据库
bash base: whatis bash                      # 查看某个命令的解释，一句话告诉你这是干什么的
bash base: clear                            # 清初屏幕内容
bash base: reset                            # 重置终端（当你不小心 cat 了一个二进制，终端状态乱掉时使用）
-------------------------------------- BASH DIRECTORY ---------------------------------------
bash directory: cd                          # 返回自己 $HOME 目录
bash directory: cd {dirname}                # 进入目录
bash directory: pwd                         # 显示当前所在目录
bash directory: mkdir {dirname}             # 创建目录
bash directory: mkdir -p {dirname}          # 递归创建目录
bash directory: pushd {dirname}             # 目录压栈并进入新目录
bash directory: popd                        # 弹出并进入栈顶的目录
bash directory: dirs -v                     # 列出当前目录栈
bash directory: cd -                        # 回到之前的目录
bash directory: cd -{N}                     # 切换到目录栈中的第 N个目录，比如 cd -2 将切换到第二个
-------------------------------------- BASH FILES -------------------------------------------
bash files: ls                              # 显示当前目录内容，后面可接目录名：ls {dir} 显示指定目录
bash files: ls -l                           # 列表方式显示目录内容，包括文件日期，大小，权限等信息
bash files: ls -1                           # 列表方式显示目录内容，只显示文件名称，减号后面是数字 1
bash files: ls -a                           # 显示所有文件和目录，包括隐藏文件（.开头的文件/目录名）
bash files: ln -s {fn} {link}               # 给指定文件创建一个软链接
bash files: cp {src} {dest}                 # 拷贝文件，cp -r dir1 dir2 可以递归拷贝（目录）
bash files: rm {fn}                         # 删除文件，rm -r 递归删除目录，rm -f 强制删除
bash files: mv {src} {dest}                 # 移动文件，如果 dest 是目录，则移动，是文件名则覆盖
bash files: touch {fn}                      # 创建或者更新一下制定文件
bash files: cat {fn}                        # 输出文件原始内容
bash files: any_cmd > {fn}                  # 执行任意命令并将标准输出重定向到指定文件
bash files: more {fn}                       # 逐屏显示某文件内容，空格翻页，q 退出
bash files: less {fn}                       # 更高级点的 more，更多操作，q 退出
bash files: head {fn}                       # 显示文件头部数行，可用 head -3 abc.txt 显示头三行
bash files: tail {fn}                       # 显示文件尾部数行，可用 tail -3 abc.txt 显示尾部三行
bash files: tail -f {fn}                    # 持续显示文件尾部数据，可用于监控日志
bash files: nano {fn}                       # 使用 nano 编辑器编辑文件
bash files: vim {fn}                        # 使用 vim 编辑文件
bash files: diff {f1} {f2}                  # 比较两个文件的内容
bash files: wc {fn}                         # 统计文件有多少行，多少个单词
bash files: chmod 644 {fn}                  # 修改文件权限为 644，可以接 -R 对目录循环改权限
bash files: chgrp group {fn}                # 修改文件所属的用户组
bash files: chown user1 {fn}                # 修改文件所有人为 user1, chown user1:group1 fn 可以修改组
bash files: file {fn}                       # 检测文件的类型和编码
bash files: basename {fn}                   # 查看文件的名字（不包括路径）
bash files: dirname {fn}                    # 查看文件的路径（不包括名字）
bash files: grep {pat} {fn}                 # 在文件中查找出现过 pat 的内容
bash files: grep -r {pat} .                 # 在当前目录下递归查找所有出现过 pat 的文件内容
bash files: stat {fn}                       # 显示文件的详细信息
-------------------------------------- BASH USER --------------------------------------------
bash user: whoami                           # 显示我的用户名
bash user: who                              # 显示已登陆用户信息，w / who / users 内容略有不同
bash user: w                                # 显示已登陆用户信息，w / who / users 内容略有不同
bash user: users                            # 显示已登陆用户信息，w / who / users 内容略有不同
bash user: passwd                           # 修改密码，passwd {user} 可以用于 root 修改别人密码
bash user: finger {user}                    # 显示某用户信息，包括 id, 名字, 登陆状态等
bash user: adduser {user}                   # 添加用户
bash user: deluser {user}                   # 删除用户
bash user: w                                # 查看谁在线
bash user: su                               # 切换到 root 用户
bash user: su -                             # 切换到 root 用户并登陆（执行登陆脚本）
bash user: su {user}                        # 切换到某用户
bash user: su -{user}                       # 切换到某用户并登陆（执行登陆脚本）
bash user: id {user}                        # 查看用户的 uid，gid 以及所属其他用户组
bash user: id -u {user}                     # 打印用户 uid
bash user: id -g {user}                     # 打印用户 gid
bash user: write {user}                     # 向某用户发送一句消息
bash user: last                             # 显示最近用户登陆列表
bash user: last {user}                      # 显示登陆记录
bash user: lastb                            # 显示失败登陆记录
bash user: lastlog                          # 显示所有用户的最近登陆记录
bash user: sudo {command}                   # 以 root 权限执行某命令
-------------------------------------- BASH PROCESS -----------------------------------------
bash process: ps                            # 查看当前会话进程
bash proceps: ps ax                         # 查看所有进程，类似 ps -e
bash proceps: ps aux                        # 查看所有进程详细信息，类似 ps -ef
bash proceps: ps auxww                      # 查看所有进程，并且显示进程的完整启动命令
bash proceps: ps -u {user}                  # 查看某用户进程
bash proceps: ps axjf                       # 列出进程树
bash proceps: ps xjf -u {user}              # 列出某用户的进程树
bash proceps: ps -eo pid,user,command       # 按用户指定的格式查看进程
bash proceps: ps aux | grep httpd           # 查看名为 httpd 的所有进程
bash proceps: ps --ppid {pid}               # 查看父进程为 pid 的所有进程
bash proceps: pstree                        # 树形列出所有进程，pstree 默认一般不带，需安装
bash proceps: pstree {user}                 # 进程树列出某用户的进程
bash proceps: pstree -u                     # 树形列出所有进程以及所属用户
bash proceps: pgrep {procname}              # 搜索名字匹配的进程的 pid，比如 pgrep apache2
bash proceps: kill {pid}                    # 结束进程
bash proceps: kill -9 {pid}                 # 强制结束进程，9/SIGKILL 是强制不可捕获结束信号
bash proceps: kill -KILL {pid}              # 强制执行进程，kill -9 的另外一种写法
bash proceps: kill -l                       # 查看所有信号
bash proceps: kill -l TERM                  # 查看 TERM 信号的编号
bash proceps: killall {procname}            # 按名称结束所有进程
bash proceps: pkill {procname}              # 按名称结束进程，除名称外还可以有其他参数
bash proceps: top                           # 查看最活跃的进程
bash proceps: top -u {user}                 # 查看某用户最活跃的进程
bash proceps: any_command &                 # 在后台运行某命令，也可用 CTRL+Z 将当前进程挂到后台
bash proceps: jobs                          # 查看所有后台进程（jobs）
bash proceps: bg                            # 查看后台进程，并切换过去
bash proceps: fg                            # 切换后台进程到前台
bash proceps: fg {job}                      # 切换特定后台进程到前台
bash proceps: trap cmd sig1 sig2            # 在脚本中设置信号处理命令
bash proceps: trap "" sig1 sig2             # 在脚本中屏蔽某信号
bash proceps: trap - sig1 sig2              # 恢复默认信号处理行为
bash proceps: nohup {command}               # 长期运行某程序，在你退出登陆都保持它运行
bash proceps: nohup {command} &             # 在后台长期运行某程序
bash proceps: disown {PID|JID}              # 将进程从后台任务列表（jobs）移除
bash proceps: wait                          # 等待所有后台进程任务结束
-------------------------------------- BASH SSH SYSTEM NETWORK ------------------------------
bash ssh: ssh user@host                     # 以用户 user 登陆到远程主机 host
bash ssh: ssh -p {port} user@host           # 指定端口登陆主机
bash ssh: ssh-copy-id user@host             # 拷贝你的 ssh key 到远程主机，避免重复输入密码
bash ssh: scp {fn} user@host:path           # 拷贝文件到远程主机
bash ssh: scp user@host:path dest           # 从远程主机拷贝文件回来
bash ssh: scp -P {port} ...                 # 指定端口远程拷贝文件
bash system: uname -a                       # 查看内核版本等信息
bash system: man {help}                     # 查看帮助
bash system: man -k {keyword}               # 查看哪些帮助文档里包含了该关键字
bash system: info {help}                    # 查看 info pages，比 man 更强的帮助系统
bash system: uptime                         # 查看系统启动时间
bash system: date                           # 显示日期
bash system: cal                            # 显示日历
bash system: vmstat                         # 显示内存和 CPU 使用情况
bash system: vmstat 10                      # 每 10 秒打印一行内存和 CPU情况，CTRL+C 退出
bash system: free                           # 显示内存和交换区使用情况
bash system: df                             # 显示磁盘使用情况
bash system: du                             # 显示当前目录占用，du . --max-depth=2 可以指定深度
bash system: uname                          # 显示系统版本号
bash system: hostname                       # 显示主机名称
bash system: showkey -a                     # 查看终端发送的按键编码
bash networks: ping {host}                  # ping 远程主机并显示结果，CTRL+C 退出
bash networks: ping -c N {host}             # ping 远程主机 N 次
bash networks: traceroute {host}            # 侦测路由连通情况
bash networks: mtr {host}                   # 高级版本 traceroute
bash networks: host {domain}                # DNS 查询，{domain} 前面可加 -a 查看详细信息
bash networks: whois {domain}               # 取得域名 whois 信息
bash networks: dig {domain}                 # 取得域名 dns 信息
bash networks: route -n                     # 查看路由表
bash networks: netstat -a                   # 列出所有端口
bash networks: netstat -an                  # 查看所有连接信息，不解析域名
bash networks: netstat -anp                 # 查看所有连接信息，包含进程信息（需要 sudo）
bash networks: netstat -l                   # 查看所有监听的端口
bash networks: netstat -t                   # 查看所有 TCP 链接
bash networks: netstat -lntu                # 显示所有正在监听的 TCP 和 UDP 信息
bash networks: netstat -lntup               # 显示所有正在监听的 socket 及进程信息
bash networks: netstat -i                   # 显示网卡信息
bash networks: netstat -rn                  # 显示当前系统路由表，同 route -n
bash networks: ss -an                       # 比 netstat -an 更快速更详细
bash networks: ss -s                        # 统计 TCP 的 established, wait 等
bash networks: wget {url}                   # 下载文件，可加 --no-check-certificate 忽略 ssl 验证
bash networks: wget -qO- {url}              # 下载文件并输出到标准输出（不保存）
bash networks: curl -sL {url}               # 同 wget -qO- {url} 没有 wget 的时候使用
bash networks: sz {file}                    # 发送文件到终端，zmodem 协议
bash networks: rz                           # 接收终端发送过来的文件
-------------------------------------- BASH VARIABLE ----------------------------------------
bash variable: varname=value                # 定义变量
bash variable: varname=value command        # 定义子进程变量并执行子进程
bash variable: echo $varname                # 查看变量内容
bash variable: echo $$                      # 查看当前 shell 的进程号
bash variable: echo $!                      # 查看最近调用的后台任务进程号
bash variable: echo $?                      # 查看最近一条命令的返回码
bash variable: export VARNAME=value         # 设置环境变量（将会影响到子进程）
bash variable: array[0]=valA                # 定义数组
bash variable: array[1]=valB                # 定义数组
bash variable: array[2]=valC                # 定义数组
bash variable: ${array[i]}                  # 取得数组中的元素
bash variable: ${#array[@]}                 # 取得数组的长度
bash variable: ${#array[i]}                 # 取得数组中某个变量的长度
bash variable: declare -a                   # 查看所有数组
bash variable: declare -f                   # 查看所有函数
bash variable: declare -F                   # 查看所有函数，仅显示函数名
bash variable: declare -i                   # 查看所有整数
bash variable: declare -r                   # 查看所有只读变量
bash variable: declare -x                   # 查看所有被导出成环境变量的东西
bash variable: declare -p varname           # 输出变量是怎么定义的（类型+值）
bash variable: ${varname:-word}             # 如果变量不为空则返回变量，否则返回 word
bash variable: ${varname:=word}             # 如果变量不为空则返回变量，否则赋值成 word 并返回
bash variable: ${varname:?message}          # 如果变量不为空则返回变量，否则打印错误信息并退出
bash variable: ${varname:+word}             # 如果变量不为空则返回 word，否则返回 null
bash variable: ${varname:offset:len}        # 取得字符串的子字符串
bash variable: ${variable#pattern}          # 如果变量头部匹配 pattern，则删除最小匹配部分返回剩下的
bash variable: ${variable##pattern}         # 如果变量头部匹配 pattern，则删除最大匹配部分返回剩下的
bash variable: ${variable%pattern}          # 如果变量尾部匹配 pattern，则删除最小匹配部分返回剩下的
bash variable: ${variable%%pattern}         # 如果变量尾部匹配 pattern，则删除最大匹配部分返回剩下的
bash variable: ${variable/pattern/str}      # 将变量中第一个匹配 pattern 的替换成 str，并返回
bash variable: ${variable//pattern/str}     # 将变量中所有匹配 pattern 的地方替换成 str 并返回
bash variable: ${#varname}                  # 返回字符串长度
bash variable: *(patternlist)               # 零次或者多次匹配
bash variable: +(patternlist)               # 一次或者多次匹配
bash variable: ?(patternlist)               # 零次或者一次匹配
bash variable: @(patternlist)               # 单词匹配
bash variable: !(patternlist)               # 不匹配
bash variable: array=($text)                # 按空格分隔 text 成数组，并赋值给变量
bash variable: IFS="/" array=($text)        # 按斜杆分隔字符串 text 成数组，并赋值给变量
bash variable: text="${array[*]}"           # 用空格链接数组并赋值给变量
bash variable: A=( foo bar "a  b c" 42 )    # 数组定义
bash variable: B=("${A[@]:1:2}")            # 数组切片：B=( bar "a  b c" )
bash variable: C=("${A[@]:1}")              # 数组切片：C=( bar "a  b c" 42 )
bash variable: echo "${B[@]}"               # bar a  b c
bash variable: echo "${B[1]}"               # a  b c
bash variable: echo "${C[@]}"               # bar a  b c 42
bash variable: echo "${C[@]: -2:2}"         # a  b c 42  减号前的空格是必须的
bash variable: $(UNIX command)              # 运行命令，并将标准输出内容捕获并返回
bash variable: varname=$(id -u user)        # 将用户名为 user 的 uid 赋值给 varname 变量
bash variable: num=$(expr 1 + 2)            # 兼容 posix sh 的计算，使用 expr 命令计算结果
bash variable: num=$(expr $num + 1)         # 数字自增
bash variable: expr 2 \* \( 2 + 3 \)        # 兼容 posix sh 的复杂计算，输出 10
bash variable: num=$((1 + 2))               # 计算 1+2 赋值给 num，使用 bash 独有的 $((..)) 计算
bash variable: num=$(($num + 1))            # 变量递增
bash variable: num=$((num + 1))             # 变量递增，双括号内的 $ 可以省略
bash variable: num=$((1 + (2 + 3) * 2))     # 复杂计算
-------------------------------------- BASH ACTIONS INDICATOR -------------------------------
bash actions: !!                            # 上一条命令
bash actions: !^                            # 上一条命令的第一个单词
bash actions: !:n                           # 上一条命令的第n个单词
bash actions: !:n-$                         # 上一条命令的第n个单词到最后一个单词
bash actions: !$                            # 上一条命令的最后一个单词
bash actions: !-n:$                         # 上n条命令的最后一个单词
bash actions: !string                       # 最近一条包含string的命令
bash actions: !^string1^string2             # 最近一条包含string1的命令, 快速替换string1为string2
bash actions: !#                            # 本条命令之前所有的输入内容
bash actions: !#:n                          # 本条命令之前的第n个单词, 快速备份cp /etc/passwd !#:1.bak
-------------------------------------- BASH CONDITIONAL JUDGMENT ----------------------------
bash judge: statement1 && statement2        # and 操作符
bash judge: statement1 || statement2        # or 操作符
bash judge: exp1 -a exp2                    # exp1 和 exp2 同时为真时返回真（POSIX XSI扩展）
bash judge: exp1 -o exp2                    # exp1 和 exp2 有一个为真就返回真（POSIX XSI扩展）
bash judge: ( expression )                  # 如果 expression 为真时返回真，输入注意括号前反斜杆
bash judge: ! expression                    # 如果 expression 为假那返回真
bash judge: str1 = str2                     # 判断字符串相等，如 [ "$x" = "$y" ] && echo yes
bash judge: str1 != str2                    # 判断字符串不等，如 [ "$x" != "$y" ] && echo yes
bash judge: str1 < str2                     # 字符串小于，如 [ "$x" \< "$y" ] && echo yes
bash judge: str2 > str2                     # 字符串大于，注意 < 或 > 是字面量，输入时要加反斜杆
bash judge: -n str1                         # 判断字符串不为空（长度大于零）
bash judge: -z str1                         # 判断字符串为空（长度等于零）
bash judge: -a file                         # 判断文件存在，如 [ -a /tmp/abc ] && echo "exists"
bash judge: -d file                         # 判断文件存在，且该文件是一个目录
bash judge: -e file                         # 判断文件存在，和 -a 等价
bash judge: -f file                         # 判断文件存在，且该文件是一个普通文件（非目录等）
bash judge: -r file                         # 判断文件存在，且可读
bash judge: -s file                         # 判断文件存在，且尺寸大于0
bash judge: -w file                         # 判断文件存在，且可写
bash judge: -x file                         # 判断文件存在，且执行
bash judge: -N file                         # 文件上次修改过后还没有读取过
bash judge: -O file                         # 文件存在且属于当前用户
bash judge: -G file                         # 文件存在且匹配你的用户组
bash judge: file1 -nt file2                 # 文件1 比 文件2 新
bash judge: file1 -ot file2                 # 文件1 比 文件2 旧
bash judge: num1 -eq num2                   # 数字判断：num1 == num2
bash judge: num1 -ne num2                   # 数字判断：num1 != num2
bash judge: num1 -lt num2                   # 数字判断：num1 < num2
bash judge: num1 -le num2                   # 数字判断：num1 <= num2
bash judge: num1 -gt num2                   # 数字判断：num1 > num2
bash judge: num1 -ge num2                   # 数字判断：num1 >= num2
-------------------------------------- BASH COMMAND PROCESSING ------------------------------
bash processing: command ls                 # 忽略 alias 直接执行程序或者内建命令 ls
bash processing: builtin cd                 # 忽略 alias 直接运行内建的 cd 命令
bash processing: enable                     # 列出所有 bash 内置命令，或禁止某命令
bash processing: help {builtin_command}     # 查看内置命令的帮助（仅限 bash 内置命令）
bash processing: eval $script               # 对 script 变量中的字符串求值（执行）
-------------------------------------- BASH IO ----------------------------------------------
bash io: cmd1 | cmd2                        # 管道，cmd1 的标准输出接到 cmd2 的标准输入
bash io: < file                             # 将文件内容重定向为命令的标准输入
bash io: > file                             # 将命令的标准输出重定向到文件，会覆盖文件
bash io: >> file                            # 将命令的标准输出重定向到文件，追加不覆盖
bash io: >| file                            # 强制输出到文件，即便设置过：set -o noclobber
bash io: n>| file                           # 强制将文件描述符 n的输出重定向到文件
bash io: <> file                            # 同时使用该文件作为标准输入和标准输出
bash io: n<> file                           # 同时使用文件作为文件描述符 n 的输出和输入
bash io: n> file                            # 重定向文件描述符 n 的输出到文件
bash io: n< file                            # 重定向文件描述符 n 的输入为文件内容
bash io: n>&                                # 将标准输出 dup/合并 到文件描述符 n
bash io: n<&                                # 将标准输入 dump/合并 定向为描述符 n
bash io: n>&m                               # 文件描述符 n 被作为描述符 m 的副本，输出用
bash io: n<&m                               # 文件描述符 n 被作为描述符 m 的副本，输入用
bash io: &>file                             # 将标准输出和标准错误重定向到文件
bash io: <&-                                # 关闭标准输入
bash io: >&-                                # 关闭标准输出
bash io: n>&-                               # 关闭作为输出的文件描述符 n
bash io: n<&-                               # 关闭作为输入的文件描述符 n
bash io: diff <(cmd1) <(cmd2)               # 比较两个命令的输出
-------------------------------------- BASH CUT ---------------------------------------------
bash cut: cut -c 1-16                       # 截取每行头16个字符
bash cut: cut -c 1-16 file                  # 截取指定文件中每行头 16个字符
bash cut: cut -c3-                          # 截取每行从第三个字符开始到行末的内容
bash cut: cut -d':' -f5                     # 截取用冒号分隔的第五列内容
bash cut: cut -d';' -f2,10                  # 截取用分号分隔的第二和第十列内容
bash cut: cut -d' ' -f3-7                   # 截取空格分隔的三到七列
bash cut: echo "hello" | cut -c1-3          # 显示 hel
bash cut: echo "hello sir" | cut -d' ' -f2  # 显示 sir
-------------------------------------- BASH AWK SED -----------------------------------------
bash awk: awk '{print $5}' file             # 打印文件中以空格分隔的第五列
bash awk: awk -F ',' '{print $5}' file      # 打印文件中以逗号分隔的第五列
bash awk: awk '/str/ {print $2}' file       # 打印文件中包含 str 的所有行的第二列
bash awk: awk -F ',' '{print $NF}' file     # 打印逗号分隔的文件中的每行最后一列
bash awk: awk '{s+=$1} END {print s}' file  # 计算所有第一列的合
bash awk: awk 'NR%3==1' file                # 从第一行开始，每隔三行打印一行
bash sed: sed 's/find/replace/' file        # 替换文件中首次出现的字符串并输出结果
bash sed: sed '10s/find/replace/' file      # 替换文件第 10 行内容
bash sed: sed '10,20s/find/replace/' file   # 替换文件中 10-20 行内容
bash sed: sed -r 's/regex/replace/g' file   # 替换文件中所有出现的字符串
bash sed: sed -i 's/find/replace/g' file    # 替换文件中所有出现的字符并且覆盖文件
bash sed: sed -i '/find/i\newline' file     # 在文件的匹配文本前插入行
bash sed: sed -i '/find/a\newline' file     # 在文件的匹配文本后插入行
bash sed: sed '/line/s/find/replace/' file  # 先搜索行特征再执行替换
bash sed: sed -e 's/f/r/' -e 's/f/r' file   # 执行多次替换
bash sed: sed 's#find#replace#' file        # 使用 # 替换 / 来避免 pattern 中有斜杆
bash sed: sed -i -r 's/^\s+//g' file        # 删除文件每行头部空格
bash sed: sed '/^$/d' file                  # 删除文件空行并打印
bash sed: sed -i 's/\s\+$//' file           # 删除文件每行末尾多余空格
bash sed: sed -n '2p' file                  # 打印文件第二行
bash sed: sed -n '2,5p' file                # 打印文件第二到第五行
-------------------------------------- BASH SORT --------------------------------------------
bash sort: sort file                        # 排序文件
bash sort: sort -r file                     # 反向排序（降序）
bash sort: sort -n file                     # 使用数字而不是字符串进行比较
bash sort: sort -t: -k 3n /etc/passwd       # 按 passwd 文件的第三列进行排序
bash sort: sort -u file                     # 去重排序
-------------------------------------- BASH KEY BINDING -------------------------------------
bash key binding: bind '"\eh":"\C-b"'       # 绑定 ALT+h 为光标左移，同 CTRL+b / <Left>
bash key binding: bind '"\el":"\C-f"'       # 绑定 ALT+l 为光标右移，同 CTRL+f / <Right>
bash key binding: bind '"\ej":"\C-n"'       # 绑定 ALT+j 为下条历史，同 CTRL+n / <Down>
bash key binding: bind '"\ek":"\C-p"'       # 绑定 ALT+k 为上条历史，同 CTRL+p / <Up>
bash key binding: bind '"\eH":"\eb"'        # 绑定 ALT+H 为光标左移一个单词，同 ALT-b
bash key binding: bind '"\eL":"\ef"'        # 绑定 ALT+L 为光标右移一个单词，同 ALT-f
bash key binding: bind '"\eJ":"\C-a"'       # 绑定 ALT+J 为移动到行首，同 CTRL+a / <Home>
bash key binding: bind '"\eK":"\C-e"'       # 绑定 ALT+K 为移动到行末，同 CTRL+e / <End>
bash key binding: bind '"\e;":"ls -l\n"'    # 绑定 ALT+; 为执行 ls -l 命令
-------------------------------------- BASH IP IFCONFIG NMAP --------------------------------
bash ip: ip a                               # 显示所有网络地址，同 ip address
bash ip: ip a show eth1                     # 显示网卡 IP 地址
bash ip: ip a add 172.16.1.23/24 dev eth1   # 添加网卡 IP 地址
bash ip: ip a del 172.16.1.23/24 dev eth1   # 删除网卡 IP 地址
bash ip: ip link show dev eth0              # 显示网卡设备属性
bash ip: ip link set eth1 up                # 激活网卡
bash ip: ip link set eth1 down              # 关闭网卡
bash ip: ip link set eth1 address {mac}     # 修改 MAC 地址
bash ip: ip neighbour                       # 查看 ARP 缓存
bash ip: ip route                           # 查看路由表
bash ip: ip route del 10.1.0.0/24           # 删除静态路由
bash ifconfig: ifconfig                     # 显示所有网卡和接口信息
bash ifconfig: ifconfig -a                  # 显示所有网卡（包括开机没启动的）信息
bash ifconfig: ifconfig eth0                # 指定设备显示信息
bash ifconfig: ifconfig eth0 up             # 激活网卡
bash ifconfig: ifconfig eth0 down           # 关闭网卡
bash ifconfig: ifconfig eth0 192.168.120.56                        # 给网卡配置 IP 地址
bash ifconfig: ifconfig eth0 10.0.0.8 netmask 255.255.255.0 up     # 配置 IP 并启动
bash ifconfig: ifconfig eth0 hw ether 00:aa:bb:cc:dd:ee            # 修改 MAC 地址
bash nmap: nmap 10.0.0.12                   # 扫描主机 1-1000 端口
bash nmap: nmap -p 1024-65535 10.0.0.12     # 扫描给定端口
bash nmap: nmap 10.0.0.0/24                 # 给定网段扫描局域网内所有主机
bash nmap: nmap -O -sV 10.0.0.12            # 探测主机服务和操作系统版本
-------------------------------------- BASH MISC --------------------------------------------
bash misc: man hier                         # 查看文件系统的结构和含义
bash misc: man test                         # 查看 posix sh 的条件判断帮助
bash misc: man ascii                        # 显示 ascii 表
bash misc: getconf LONG_BIT                 # 查看系统是 32 位还是 64 位
bash misc: bind -P                          # 列出所有 bash 的快捷键
bash misc: mount | column -t                # 漂亮的列出当前加载的文件系统
bash misc: curl ip.cn                       # 取得外网 ip 地址和服务商信息
bash misc: disown -a && exit                # 关闭所有后台任务并退出
bash misc: cat /etc/issue                   # 查看 Linux 发行版信息
bash misc: lsof -i port:80                  # 哪个程序在使用 80 端口？
bash misc: showkey -a                       # 取得按键的 ASCII 码
bash misc: svn diff | view -                # 使用 Vim 来显示带色彩的 diff 输出
bash misc: mv filename.{old,new}            # 快速文件改名
bash misc: time read                        # 使用 CTRL-D 停止，最简单的计时功能
bash misc: cp file.txt{,.bak}               # 快速备份文件
bash misc: sudo touch /forcefsck            # 强制在下次重启时扫描磁盘
bash misc: find ~ -mmin 60 -type f          # 查找 $HOME 目录中，60 分钟内修改过的文件
bash misc: curl wttr.in/~beijing            # 查看北京的天气预报
bash misc: echo ${SSH_CLIENT%% *}           # 取得你是从什么 IP 链接到当前主机上的
bash misc: echo $[RANDOM%X+1]               # 取得 1 到 X 之间的随机数
bash misc: bind -x '"\C-l":ls -l'           # 设置 CTRL+l 为执行 ls -l 命令
bash misc: find / -type f -size +5M         # 查找大于 5M 的文件
bash misc: chmod --reference f1 f2          # 将 f2 的权限设置成 f1 一模一样的
bash misc: curl -L cheat.sh                 # 速查表大全
###################################### GIT SHORTCUTS ########################################
-------------------------------------- GIT INIT ---------------------------------------------
git init: git init                          # 初始化GIT仓库
-------------------------------------- GIT SUBMIT THE MODIFICATION --------------------------
git submit: git add <file>                  # 添加需要提交的文件
git submit: git add -u                      # 提交work directory中所有已track的文件至staging area
git submit: git commit -m "descriptions"    # 提交信息
git submit: git commit --amend              # 对最近一次的提交做内容修改
-------------------------------------- GIT DIFF ---------------------------------------------
git diff: git status                        # 查看状态
git diff: git status -s                     # 文件状态缩略信息, 常见 A:新增; M:文件变更; ?:未track; D:删除
git diff: git diff <file>                   # 对比文件
git diff: git diff HEAD -- <file>           # 查看工作区和版本库里面最新版本的区别
git diff: git diff --check <file>           # 检查是否有空白错误(regex:' \{1,\}$')
git diff: git diff --cached <file>          # 查看已add的内容(绿M)
git diff: git diff branch1 branch2 --stat   # 查看两个分支差异
git diff: git diff branch1 branch2 <file..> # 查看分支文件具体差异
-------------------------------------- GIT HISTORY ------------------------------------------
git history: git log                        # 查看历史记录
git history: git reflog                     # 查看历史记录
git history: git log -n                     # 最近n条的提交历史
git history: git log <branch_name> -n       # 分支branch_name最近n条的提交历史
git history: git log --stat                 # 历次commit的文件变化
git history: git log --shortstat            # 对比--stat只显示最后的总文件和行数变化统计(n file changed, n insertions(+), n deletion(-))
git history: git log --name-status          # 显示新增、修改、删除的文件清单
git history: git log lhs_hash..rhs_hash     # 对比两次commit的变化(增删的主语为lhs, 如git log HEAD~2..HEAD == git log HEAD -3)
git history: git log -p                     # 历次commit的内容增删
git history: git log -p -W                  # 历次commit的内容增删, 同时显示变更内容的上下文
git history: git log <branch> --oneline     # 对提交历史单行排列
git history: git log <branch> --graph       # 对提交历史图形化排列
git history: git log <branch> --decorate    # 对提交历史关联相关引用, 如tag, 本地远程分支等
git history: git log --pretty=format        # 常用的选项(摘自progit_v2.1.9)
git history: %H                             # 提交对象（commit）的完整哈希字串
git history: %h                             # 提交对象的简短哈希字串
git history: %T                             # 树对象（tree）的完整哈希字串
git history: %t                             # 树对象的简短哈希字串
git history: %P                             # 父对象（parent）的完整哈希字串
git history: %p                             # 父对象的简短哈希字串
git history: %an                            # 作者（author）的名字
git history: %ae                            # 作者的电子邮件地址
git history: %ad                            # 作者修订日期（可以用 --date= 选项定制格式）
git history: %ar                            # 作者修订日期，按多久以前的方式显示
git history: %cn                            # 提交者（committer）的名字
git history: %ce                            # 提交者的电子邮件地址
git history: %cd                            # 提交日期
git history: %cr                            # 提交日期，按多久以前的方式显示
git history: %s                             # 提交说明
git history: git log --since --after        # 显示时间之后的提交
git history: git log --until --before       # 显示时间之前的提交
git history: git --author                   # 显示指定作者的提交
git history: git --committer                # 显示指定committer的提交(注:committer不一定是author)
git history: git log -S [keyword]           # 仅显示添加或移除了某个关键字的提交(某些场景比单独git log -p | grep [keyword] 好用很多)
git history: git log --since=1.weeks        # 过去一周的提交(写周报的时候可以看看我这一周干了啥)
git history: git log --since=1.days         # 过去一天的提交(下班的时候可以看看我这一天干了啥)
-------------------------------------- GIT RESET --------------------------------------------
git reset: git reset --hard HEAD^           # 回退到上1版本
git reset: git reset --hard HEAD~5          # 回退到上5个版本
git reset: git reset --hard id              # 回退到指定版本
-------------------------------------- GIT UNDO ---------------------------------------------
git undu: git checkout -- <file>            # 撤销修改：误修改工作区文件，未git add/commit
git undu: git restore <file>                # 撤销修改：误修改工作区文件，未git add/commit
git undu: git reset HEAD <file>             # 撤销git add：误将文件加入暂存区（git add），未git commit
git undu: git reset --hard HEAD^            # 撤销git commit：误将文件提交（一旦提交，只能通过版本回退进行撤销）
-------------------------------------- GIT DELETE RECOVER -----------------------------------
git del re: git rm/add <file>               # 添加或者删除
git del re: git commit -m "remove <file>"   # 删除版本库中的<file>：删除工作区文件后，继续删除版本库中相应的文件
git del re: git checkout -- <file>          # 根据版本库中的<file>恢复工作区<file>
-------------------------------------- GIT CLEAN --------------------------------------------
git clean: git clean -i                     # 交互式清理, 不常用
git clean: git clean -n                     # 查看清理文件列表(不包括文件夹), 不执行实际清理动作
git clean: git clean -n -d                  # 查看清理文件列表(包括文件夹), 不执行实际清理动作
git clean: git clean -f                     # 清理所有未track文件
git clean: git clean -df                    # 清理所有未track文件和文件夹, 常用, 但使用前确保新增加的文件或文件夹已add, 否则新创建的文件或者文件夹也会被强制删除
-------------------------------------- GIT GITHUB -------------------------------------------
git github: git remote add origin <address> # 在本地工作区目录下按照 GitHub 提示进行关联
git github: git remote rm origin            # 解除错误关联
git github: git push -u origin master       # 第一次将本地仓库推送至远程仓库（每次在本地提交后进行操作）
git github: git push origin master          # 以后每次将本地仓库推送至远程仓库（每次在本地提交后进行操作）
-------------------------------------- GIT BRANCH -------------------------------------------
git branch: git branch <branch name>        # 创建<branch name>分支
git branch: git checkout <branch name>      # 切换至<branch name>分支
git branch: git switch <branch name>        # 切换至<branch name>分支
git branch: git checkout -b <branch name>   # 创建并切换至<branch name>分支
git branch: git switch -c <branch name>     # 创建并切换至<branch name>分支
git branch: git branch                      # 查看已有分支（* 表示当前分支）
git branch: git merge <branch name>         # 合并<branch name>到当前分支（通常在master分支下操作）
git branch: git branch -d <branch name>     # 删除分支
git branch: git log --graph                 # 合并时报错“分支发生冲突”，首先vim相应文件，修改冲突位置，然后按照git add/commit重新提交，最后删除多余分支即可。
git branch: git branch -D <branch name>     # 强制删除分支（丢弃未合并分支）
-------------------------------------- GIT TAGS ---------------------------------------------
git tags: git tag                           # 查看标签
git tags: git show <tag name>               # 查看指定标签
git tags: git log                           # 在log中显示标签
git tags: git tag <tag name>                # 为上次commit位置打标签
git tags: git tag <tag name> <commit id>    # 为指定commit位置打标签
git tags: git tag -d <tag name>             # 删除本地标签
git tags: git push origin <tag name>        # 推送指定标签到远程
git tags: git push origin --tags            # 推送所有本地标签到远程
git tags: git push origin :refs/tags/<tag>  # 删除远程标签（先删除本地标签）
-------------------------------------- GIT GITIGNORE ----------------------------------------
git gitignore: /<dir name>/                 # 忽略文件夹
git gitignore: *.zip                        # 忽略.zip文件
git gitignore: /<dir name>/<file name>      # 忽略指定文件
git gitignore: git add -f <file>            # 强制添加
git gitignore: git check-ignore -v <file>   # 查看生效规则
-------------------------------------- GIT SUBMODULE ----------------------------------------
git module: git submodule foreach git pull  # 子模块更新
