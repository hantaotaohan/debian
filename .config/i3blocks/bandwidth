#!/usr/bin/env bash

# ================================================================================================================================
#
#                                                           BANDWIDTH                                                          
#
#                                                       Update: 2023.01.16                                                      
#
# ================================================================================================================================

# GET CUSTOM IN AND OUT LABELS IF PROVIDED BY COMMAND LINE ARGUMENTS

while [[ $# -gt 1 ]]; do
    KEY="$1"
    case "$KEY" in 
        -i|--inlabel)
            INLABEL="$2"
            shift;;
        -o|--outlabel)
            OUTLABEL="$2"
            shift;;
    esac
    shift
done

[[ -z "$INLABEL" ]] && INLABEL=""
[[ -z "$OUTLABEL" ]] && OUTLABEL=""

# USE THE PROVIDED INTERFACE, OTHERWISE THE DEVICE USED FOR THE DEFAULT ROUTE.

if [[ -z $INTERFACE ]] && [[ -n $BLOCK_INSTANCE ]]; then
    INTERFACE=$BLOCK_INSTANCE
elif [[ -z $INTERFACE ]]; then
    INTERFACE=$(ip route | awk '/^default/ { print $5 ; exit }')
fi

# EXIT IF THERE IS NO DEFAULT ROUTE

[[ -z "$INTERFACE" ]] && exit


# PATH TO STORE THE OLD RESULTS IN

PATH="/dev/shm/$(basename $0)-${INTERFACE}"

# GRABBING DATA FOR EACH ADAPTER.

read rx < "/sys/class/net/${INTERFACE}/statistics/rx_bytes"
read tx < "/sys/class/net/${INTERFACE}/statistics/tx_bytes"

# GET TIME

TIME=$(date +%s)

# WRITE CURRENT DATA IF FILE DOES NOT EXIST. DO NOT EXIT, THIS WILL CAUSE
# PROBLEMS IF THIS FILE IS SOURCED INSTEAD OF EXECUTED AS ANOTHER PROCESS.

if ! [[ -f "${PATH}" ]]; then
    echo "${TIME} ${rx} ${tx}" > "${PATH}"
    chmod 0666 "${PATH}"
fi


# READ PREVIOUS STATE AND UPDATE DATA STORAGE

read OLD < "${PATH}"
echo "${TIME} ${rx} ${tx}" > "${PATH}"

# PARSE OLD DATA AND CALC TIME PASSED

OLD=(${OLD//;/ })
TIME_diff=$(( $TIME - ${OLD[0]} ))

# SANITY CHECK: HAS A POSITIVE AMOUNT OF TIME PASSED

[[ "${TIME_diff}" -gt 0 ]] || exit

# CALC BYTES TRANSFERRED, AND THEIR RATE IN BYTE/S

RX_DIFF=$(( $rx - ${OLD[1]} ))
TX_DIFF=$(( $tx - ${OLD[2]} ))
RX_RATE=$(( $RX_DIFF / $TIME_diff ))
TX_RATE=$(( $TX_DIFF / $TIME_diff ))

# SHIFT BY 10 BYTES TO GET KIB/S. IF THE VALUE IS LARGER THAN
# 1024^2 = 1048576, THEN DISPLAY MIB/S INSTEAD

# INCOMING
echo -n "$INLABEL"
RX_KIB=$(( $RX_RATE >> 10 ))
if hash bc 2>/dev/null && [[ "$RX_RATE" -gt 1048576 ]]; then
    printf '%sM' "`echo "scale=1; $RX_KIB / 1024" | bc`"
else
    echo -n "${RX_KIB}K"
fi

echo -n " - "

# OUTGOING

echo -n "$OUTLABEL"
TX_KIB=$(( $TX_RATE >> 10 ))
if hash bc 2>/dev/null && [[ "$TX_RATE" -gt 1048576 ]]; then
    printf '%sM\n' "`echo "scale=1; $TX_KIB / 1024" | bc`"
else
    echo "${TX_KIB}K"
fi
