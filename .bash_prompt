#!/usr/bin/env bash

# ================================================================================================================================
#                                                                                                                                 
#                                                             PROMPT                                                            
#                                                                                                                                                                                                 
#                                                       Update: 2023.01.10                                                      
#                                                                                                                                 
# ================================================================================================================================

# ================================================================================================================================
#                                                       TERMINAL - Settings
# ================================================================================================================================

if [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then
	export TERM='gnome-256color';
elif infocmp xterm-256color >/dev/null 2>&1; then
	export TERM='xterm-256color';
fi;

# ================================================================================================================================
#                                                      GIT-PROMPT - Settings
# ================================================================================================================================

PROMPT_GIT() {

	local s='';
	local branchName='';

	git rev-parse --is-inside-work-tree &>/dev/null || return;

	branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
		git describe --all --exact-match HEAD 2> /dev/null || \
		git rev-parse --short HEAD 2> /dev/null || \
		echo '(unknown)')";

	repoUrl="$(git config --get remote.origin.url)";
	if grep -q 'chromium/src.git' <<< "${repoUrl}"; then
		s+='*';
	else
		# Check for uncommitted changes in the index.
		if ! $(git diff --quiet --ignore-submodules --cached); then
			s+='+';
		fi;
		# Check for unstaged changes.
		if ! $(git diff-files --quiet --ignore-submodules --); then
			s+='!';
		fi;
		# Check for untracked files.
		if [ -n "$(git ls-files --others --exclude-standard)" ]; then
			s+='?';
		fi;
		# Check for stashed files.
		if $(git rev-parse --verify refs/stash &>/dev/null); then
			s+='$';
		fi;
	fi;

	[ -n "${s}" ] && s=" [${s}]";

	echo -e "${1}${branchName}${2}${s}";

}

# ================================================================================================================================
#                                                  ONEDARK-THEMES - Settings
# ================================================================================================================================

if tput setaf 1 &> /dev/null; then
    tput sgr0;
    bold=$(tput bold);
    reset=$(tput sgr0);
    black=$(tput setaf 0);
    blue=$(tput setaf 4);
    cyan=$(tput setaf 6);
    green=$(tput setaf 2);
    orange=$(tput setaf 11);
    purple=$(tput setaf 5);
    red=$(tput setaf 1);
    violet=$(tput setaf 5);
    white=$(tput setaf 7);
    whitee=$(tput setaf 255);
    yellow=$(tput setaf 3);
else
    bold='';
    reset="\e[0m";
    black="\e[1;30m";
    blue="\e[1;34m";
    cyan="\e[1;36m";
    green="\e[1;32m";
    orange="\e[1;33m";
    purple="\e[1;35m";
    red="\e[1;31m";
    violet="\e[1;35m";
    white="\e[1;37m";
    yellow="\e[1;33m";
fi;

# ================================================================================================================================
#                                         HIGHLIGHT THE USER NAME WHEN LOGGED IN AS ROOT.
# ================================================================================================================================

if [[ "${USER}" == "root" ]]; then
	userStyle="${red}";
else
	userStyle="${orange}";
fi;

# ================================================================================================================================
#                                         HIGHLIGHT THE HOSTNAME WHEN CONNECTED VIA SSH.
# ================================================================================================================================

if [[ "${SSH_TTY}" ]]; then
	hostStyle="${bold}${red}";
else
	hostStyle="${blue}";
fi;

# ================================================================================================================================
#                                                             OUTPUT
# ================================================================================================================================

PROMPT_COMMAND=PROMPT

PROMPT() {

    local EXIT="$?"
    if [ "${EXIT}" -eq 0 ]; then
        exitColor="${green}"
    else
        exitColor="${red}"
    fi;

    PS1="\[\033]0;\W\007\]";
    PS1+="\[${bold}\]\n"; 
    PS1+="\[${userStyle}\]\u"; 
    PS1+="\[${white}\] at ";
    PS1+="\[${hostStyle}\]\h";
    PS1+="\[${white}\] in ";
    PS1+="\[${green}\]\w";
    PS1+="\$(PROMPT_GIT \"\[${whitee}\] on \[${bold}\${violet}\]\UE0A0 \[${violet}\]\" \"\[${blue}\]\")";
    if [ -n "$RANGER_LEVEL" ]; then PS1+="\[${purple}\] [Ranger] "; fi
    PS1+="\n";
    PS1+="\[${exitColor}\]❱❱❱ \[${reset}\]";
    export PS1;

    PS2="\[${blue}\]→ \[${reset}\]";
    export PS2;

}
