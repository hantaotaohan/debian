; -----------------------------------------------------------------------------------------------------------------
; CheatSheet
; -----------------------------------------------------------------------------------------------------------------

% CheatSheet

# CheatSheet Vim
bat --style header,grid --color always $HOME/dotfiles/setup/cheatsheets/vim_cheatsheet.vim

# CheatSheet Bash 
bat --style header,grid --color always $HOME/dotfiles/setup/cheatsheets/bash_cheatsheet.vim

# CheatSheet Git 
bat --style header,grid --color always $HOME/dotfiles/setup/cheatsheets/git_cheatsheet.vim

# CheatSheet Tmux 
bat --style header,grid --color always $HOME/dotfiles/setup/cheatsheets/tmux_cheatsheet.vim

; -----------------------------------------------------------------------------------------------------------------
; Zip
; -----------------------------------------------------------------------------------------------------------------

% Zip

# Compressed a file or Multiple files to zip
zip -r <file_name>.zip $(echo "<files>")
$ file_name : echo $(date +%H%M%S)
$ files : ls .  --- --multi 

# Add a file to zip file
zip <file_zip_name> <files>
$ file_zip_name: ls *.zip
$ files : ls .  --- --multi 

# Remove files from  zip files
zip -d <file_zip_name> <filenames>
$ file_zip_name: ls *.zip
$ filenames : zip -sf <file_zip_name>

# Unzip to the current directory
unzip <file_zip_name> 
$ file_zip_name : ls *.zip

# Unzip to the specified directory
unzip <file_zip_name> -d <unzip_file_path>
$ file_zip_name : ls *.zip
$ unzip_file_path : fd -t d . /

# View the contents of the package
unzip -l <file_zip_name>
$ file_zip_name: ls *.zip

; -----------------------------------------------------------------------------------------------------------------
; Tar
; -----------------------------------------------------------------------------------------------------------------

% Tar

# Create .tar package
tar cf <file_tar_name>.tar $(echo "<files>")
$ file_tar_name : echo $(date +%H%M%S)
$ files : ls .  --- --multi 

# Create .tar.gz package
tar czf <file_tar_name>.tar.gz $(echo "<files>")
$ file_tar_name : echo $(date +%H%M%S)
$ files : ls .  --- --multi 

# Use the Directory to create a compression package
tar czf <file_tar_name>.tar.gz -C <Directory> .
$ file_tar_name : echo $(date +%H%M%S)
$ files : ls .  --- --multi 
$ Directory : fd -t d . 

# Unzip tar to the current directory
tar xf <source_tar>
$ source_tar : ls *.tar

# Unzip tar.gz to the current directory
tar xzf <source_tar_gz>
$ source_tar_gz : ls *.tar.gz

# Unzip tar to the specified directory
tar xf <source_tar> -C <untar_file_path>
$ source_tar : ls *.tar
$ untar_file_path : fd -t d . /

# Unzip tar.gz to the specified directory
tar xzf <source_tar> -C <untargz_file_path>
$ source_tar : ls *.tar.gz
$ untargz_file_path : fd -t d . /

; -----------------------------------------------------------------------------------------------------------------
; Convert & ImageMagick
; -----------------------------------------------------------------------------------------------------------------

% Convert

# jpg to png (Single)
convert <image_jpg> <image_png>.png
$ image_jpg : ls *.jpg

# png to jpg (Single)
convert <image_png> <image_jpg>.jpg
$ image_png : ls *.png

# jpg to png (Multiple)
ls -1 *.jpg | xargs -n 1 bash -c 'convert "$0" "${0%.jpg}.png"'

# png to jpg (Multiple)
ls -1 *.png | xargs -n 1 bash -c 'convert "$0" "${0%.png}.jpg"'

# img zoom 50%
convert <image_png> -resize 50% <image2_png>

# Zoom the picture and maintain the vertical and horizontal scale
convert <image_png> -resize 640x480 <image2_png>

# Add pictures horizontally
convert <image1_png> <image2_png> <image3_png> +append <image123_png>

# Add pictures vertically
convert <image1_png> <image2_png> <image3_png> -append <image123_png>

# Create a gif of images with a 100-millisecond delay 
convert <image1_png> <image2_png> <image3_png> -delay 10 <animation_gif>

# png to pdf (Single)
convert <img_png> <doc_pdf>.pdf
$ img_png : ls *.png

# pdf to png (Single)
convert -density 200 <foo_pdf> <foo_png>.png
$ foo_pdf : ls *.pdf

# jpg to pdf (Single)
convert <img_jpg> <doc_pdf>.pdf
$ img_jpg : ls *.jpg

# pdf to jpg (Single)
convert -density 200 <foo_pdf> <foo_jpg>.jpg
$ foo_pdf : ls *.pdf

# Multiple jpg to pdf (Multiple)
convert $(ls *jpg | sort -n) <result_pdf>.pdf

# Multiple png to pdf (Multiple)
convert $(ls *png | sort -n) <result_pdf>.pdf

; -----------------------------------------------------------------------------------------------------------------
; Git
; -----------------------------------------------------------------------------------------------------------------

% Git

# Create and Toggle a new branch 
git checkout --orphan latest_branch

# Git add --all
git add -A

# Git add and Commit 
git commit -am "commit message"

# Delete master branch
git branch -D master

# Rename branch names to Master
git branch -m master

# Forced Push
git push -f origin master

# Clear origin Commit number
git checkout --orphan latest_branch && \
git add -A && \
git commit -am "commit message" && \
git branch -D <branch_name> && \
git branch -m <branch_name> && \
git push -f origin <branch_name>
$ branch_name: git branch | awk '{print $NF}'

# Set global git user name
git config --global user.name <name>

# Set global git user email
git config --global user.email <email>

# Initializes a git repository
git init

# Clone a git repository
git clone -b <branch_name> <repository> <clone_directory>

# Shallow clone with depth 1 with all branches and submodules
git clone --depth=1 --no-single-branch --recurse-submodules <repository> <clone_directory>

# Rebase upstream master into local/origin master (use if people don't clone your repository)
git fetch <remote_name>
git checkout master
git rebase <remote_name>/master
git fetch --unshallow origin
git push -f origin master

# Merge upstream master into local/origin master (use if people clone your repository)
git fetch <remote_name>
git checkout master
git merge <remote_name>/master
git fetch --unshallow origin
git push -f origin master

# View all available remote for a git repository
git remote --verbose

# Adds a remote for a git repository
git remote add <remote_name> <remote_url>

# Renames a remote for a git repository
git remote rename <old_remote_name> <new_remote_name>

# Remove a remote for a git repository
git remote remove <remote_name>

# Checkout to branch
git checkout <branch>

# Displays the current status of a git repository
git status

# Displays unstaged changes for file
cd <toplevel_directory>; \
    git diff <unstaged_files>

# Stage single or multiple files
cd <toplevel_directory>; \
    git add <changed_files>;

# Saves the changes to a file in a commit
git commit -m <message>

# Pushes committed changes to remote repository
git push -u <remote_name> <branch_name>

# Pushes changes to a remote repository overwriting another branch
git push <remote_name> <branch>:<branch_to_overwrite>

# Overwrites remote branch with local branch changes
git push <remote_name> <branch_name> -f

# Pulls changes to a remote repo to the local repo
git pull --ff-only

# Merges changes on one branch into current branch
git merge <branch_name>

# Abort the current conflict resolution process, and try to reconstruct the pre-merge state.
git merge --abort

# Displays log of commits for a repo
git log

# Displays formatted log of commits for a repo
git log --all --decorate --oneline --graph

# Clear everything
git clean -dxf

# Sign all commits in a branch based on master
git rebase master -S -f

# Skip git hooks
git commit --no-verify

# Create new branch from current HEAD
git checkout -b <new_branch_name>

$ branch: git branch | awk '{print $NF}'
$ toplevel_directory: git rev-parse --show-toplevel
$ unstaged_files: git status --untracked-files=no -s --porcelain | awk '{print $NF}' --- --multi
$ changed_files: git status --untracked-files=all -s --porcelain | awk '{print $NF}' --- --multi

; -----------------------------------------------------------------------------------------------------------------
; Systemctl
; -----------------------------------------------------------------------------------------------------------------

% systemctl, service

# Start service
systemctl start <service_inactive>

# Stop service
systemctl stop <service_active>

# Enable service
systemctl enable <service_disabled>

# Disable service
systemctl disable <service_enabled>

# Restart service
systemctl restart <service>

# Reload service
systemctl reload <service_active>

# Service status
systemctl status <service>

# List running services
systemctl list-units --type=service --state=running

# List enabled services
systemctl list-unit-files --type=service --state=enabled

# List disabled services
systemctl list-unit-files --type=service --state=disabled

$ service_inactive: systemctl list-units --type=service --state=inactive | awk '{print $1}' | grep .service | sed 's/.service$//'
$ service_active: systemctl list-units --type=service --state=active | awk '{print $1}' | grep .service | sed 's/.service$//'
$ service_enabled: systemctl list-unit-files --type=service --state=enabled | awk '{print $1}' | grep .service | sed 's/.service$//'
$ service_disabled: systemctl list-unit-files --type=service --state=disabled | awk '{print $1}' | grep .service | sed 's/.service$//'
$ service: systemctl list-units --type=service --all | awk '{print $1}' | grep .service | sed 's/.service$//'

; -----------------------------------------------------------------------------------------------------------------
; Apt
; -----------------------------------------------------------------------------------------------------------------

% apt

# Update content listings from package repositories
apt update

# List all available packages
apt list

# List all installed packages
apt list --installed

# Info about package (including description)
apt show -a <package-name>

# Show versions and archive areas of available package
apt list -a <package-name>

# Search in repository (packages and description)
apt search <query>

# Check updates for installed packages
apt list --upgradeable

# Update all installed packages
apt upgrade

# Upgrade all installed packages (add/remove dependencies)
apt full-upgrade

# Update specific/individual package
apt install --only-upgrade <package-name>

# Downgrade package to a specific version
apt install <package-name>=<package-version>

# Install a package from repository
apt install <package-name>

# Remove/delete package
apt remove <package-name>

# Remove/delete package (with config files)
apt purge <package-name>

# Install local dpkg package
apt install <filepath-deb>

# List dependencies of package
apt depends <package-name>

# List reverse dependencies of package
apt rdepends <package-name>

# Remove un-needed packages and dependencies
apt autoremove


vim:tw=78:sw=4:ts=8:ft=bash:norl:
